---
title: "Dplyr"
---

## Dplyr
`{dplyr}`, a combination of data and plier, is a package that allows manipulation of data in an easy and efficient way. Whether you want to drop columns, drop rows, create new variables, or change old variables, `{dplyr}` allows you to do this in an intuitive way which requires little code (especially compared to base R). If you have not already installed and loaded `{dplyr}`, you can do so with:

```{r}
#| code-fold: false
# Load dplyr
pacman::p_load("dplyr")
```

In this section, we will work with the `starwars` dataset, that is automatically loaded in when you load `{dplyr}`. 

```{r}
#| code-fold: false
# Show first 5 rows of starwars
head(starwars, n = 5)
```

Let's load the `starwars` data into our Global Environment so that we can easily access it:

```{r}
#| code-fold: false
# Load starwars into Global Environment object called sw
sw <- starwars
```

All `{dplyr}` functions that take a data frame or tibble start with the `.data` argument. Therefore, in all examples below, we first specify our `.data` as `sw` before supplying arguments of the function.

## Renaming and relocating
Before we can do anything to the data itself, we should make sure we like the names of the variables. Three of the variables contain the word 'color' (`hair_color`, `skin_color`, `eye_color`). However, we might think it is intuitive enough that these variables indicate colour, so maybe we want to change those names. For this we can use the function `rename()`. In `rename()`, we specify any number of arguments we want, where the left hand side of the argument indicates the new column name and the righth and side of the argument indicates the column that needs to be changed (and therefore the old column name). The right hand side can also be the position of the column (e.g., 2 for the second column).

```{r}
#| code-fold: false
# Rename variables
sw <- rename(sw, hair = hair_color, skin = skin_color, eye = eye_color)

```

:::{.callout-tip appearance="simple"}
Many functions, among which functions in `{dplyr}` like `rename()` have an argument called `...`. This ellipsis simply means that you can supply any number of arguments of the type that the function uses. For `rename()`, this means we can supply an endless list of variables to be renamed.
:::

Now our data has some changed names, but we are not done yet. It might also be preferable that sex and gender are mentioned immediately after the name. To do this, we can simply use `relocate()`. In `relocate()`, we specify a group of columns and specify before (argument `.before`) or after (argument `.after`) which column they should be placed.

```{r}
#| code-fold: false
# Relocate variables
sw <- relocate(sw, sex:gender, .after = name)

# This has the same effect
sw <- relocate(sw, c(sex, gender), .before = height)

```

## Filtering and selecting
Now that our data is a bit more how we (or I?) wanted it, we can also determine whether there are some columns or rows that we do not actually want or need. First of, because I am not interested in any data from outside the starwars universe, we can remove the column `films`. To do this, we use `select()`, which allows us to either specify the columns we want to keep, or specify the columns we want to drop. To keep columns, we simply name them and to drop columns we name them with a dash/minus sign before (-).

```{r}
#| code-fold: false
# Drop films column
sw <- select(sw, -films)

# This does the same thing
sw <- select(sw, name:species, vehicles:starships)
```

Additionally, I am not interested in any character (i.e., row) of who we do not know the mass or who is from Tatooine. Tatooine is full of sand and I don't like sand. It's coarse and rough. To remove rows, we can use the `filter()` function. In `filter()`, we supply conditions to which rows must adhere to stay. 

```{r}
#| code-fold: false
# Remove rows with missing mass or with characters from Tatooine
sw <- filter(sw, !is.na(mass) & !is.na(height) & homeworld != "Tatooine")

```

Here, we use `is.na()` to see what rows are missing in the column `mass` and then take the reverse (!). We do the same for `height`. Additionally (&), the homeworld should not equal (!=) Tatooine.

## Mutating and conditionals
Now that we have the data that we want, we might want to create some new variables. For instance, it would be interesting to know the Body Mass Index (BMI) of the characters, which we can calculate because we have height and mass. We can do that with `mutate()`. In this function, we can specify any number of arguments, with the left hand side of the argument being the name of the new variable and the right hand side being the value it should take.

A great characteristic of `mutate()` is that we can immediately use a variable we just calculted within the same `mutate()` function call. For instance, if we calculate BMI, we can immediately create a variable that indicates whether according to commonly used BMI dichotomisation for humans, a character classifies as overweight or not.

```{r}
#| code-fold: false
# Calculate BMI and overweight indicator
sw <- mutate(sw, 
             # Change height to meters
             height = height / 100,
             # Calculate BMI
             bmi = mass / height ^ 2,
             # Create indicator for overweight
             overweight = ifelse(bmi >= 25, 1, 0))

# Show summary of BMI
summary(sw[["bmi"]])

# Show table of overweight
table(sw[["overweight"]])
```

What we used to create the overweight variable was an if-else clause, which is a commonly used clause in programming. Simply, it checks whether a condition is true. If a condition is true, then it does A, otherwise it does B. In this case, `ifelse()` checks the condition `bmi >= 25`. If that condition is `TRUE`, then the variable `overweight` is assigned a 1, otherwise a 0.

If we want to be able to assign more than two values based on a single conditions, we can use two approaches. First, we can nest multiple `ifelse()` statements. Below, we code a variable `weight_status` which indicates underweight (BMI < 18, 1), normal weight (BMI 18-25, 2), overweight (BMI >25, 3), and obesity (BMI >30, 4).

```{r}
#| code-fold: false
# Create new variable weight status
sw <- mutate(sw, 
             # Create indicator for weight status
             weight_status = ifelse(bmi < 18, 1,
                                    ifelse(bmi >= 18 & bmi <= 25, 2,
                                           ifelse(bmi > 25 & bmi <= 30, 3, 4))))

```

This can quickly become unreadable if more groups should be made. Luckily, `{dplyr}` offers us `case_when()` and `case_match()`. Using `case_when()`, we only need to call one function and then supply all conditions. In `case_when()` this is written as condition ~ result:

```r
# Create new variable weight status
sw <- mutate(sw, 
             # Create indicator for weight status
             weight_status = case_when(bmi < 18 ~ 1,
                                       bmi >= 18 & bmi <= 25 ~ 2,
                                       bmi > 25 & bmi <= 30 ~ 3,
                                       .default = 4))
```

We also specify `.default = 4`, which means that any row without a matched condition should receive the value 4. However, be careful if you have missing data, as `.default` will also fill in those values. If `.default` is not supplied, any row not matching a condition will get an `NA`.

`case_when()` is a great function and especially useful for multiple conditions that can be matched based on multiple columns or when we want to use conditions (>, <=, *etc*).  Nonetheless, if we want to use only a single variable and do not need conditions, we can also use `case_match()`, where first the used variable is specified and then the matches, without having to respecify the variable in every match:

```{r}
#| code-fold: false
# Create new variable weight status
sw <- mutate(sw,
             # Create indicator for weight status
             weight_status = case_match(species,
                                        "Human" ~ "Humanoid",
                                        "Yoda's species" ~ "Small, green, and wrinkly with pointy ears",
                                        .default = species))

```

## The pipe: `%>%`
Before we continue with other useful `{dplyr}` functions, we should talk about the pipe operator `%>%`. Although `%>%` is not originally from `{dplyr}` but instead imported from `{magrittr}` that we will discuss after this section.

Normally, if we wanted to apply multiple functions at the same time (for instance, `filter()` and `select()` after one another), we would nest the functions:

```{r}
#| code-fold: false
# Keep only the birth year column and then keep only birth years above 100
filter(select(starwars, birth_year), birth_year > 100)
```

However, this quickly becomes unreadable. With `%>%`, we can transform this into more readable code. What `%>%` does is that it takes the outputted result from the previous function and feeds it into an argument in the next function called `.data` or `data` (if this argument is available). We will go into more detail in [`{magrittr}`](magrittr.qmd).

So, with `%>%`, we can rewrite the above code as:

```{r}
#| code-fold: false
# Take starwars data
starwars %>%
    # Keep only birth year column
    select(birth_year) %>%
    # Keep only birth years above 100
    filter(birth_year > 100)
```

:::{.callout-tip appearance="simple"}
Some more about annotation: with pipe operators, we can make our code much clearer and with that also our annotations. My personal preference is to annotate each new function after a pipe, so that it becomes even more readable. These annotations might just describe what we are doing, or give more details about why we are doing it. This makes it understandable to people who might not understand R equally well or know the functions we are using and allows better understanding of choices we made.
:::

## Grouping and slicing
Now that we know about pipe operators, we can apply them to some nice `{dplyr}` functions. Sometimes, we might want to calculate some statistics per group in our data. To do this, we can group the data on the variable(s) that define the groups and then run our analyses. Before we group, we must make sure the data are sorted so that all variables are already ordered in groups. We can do this with `arrange()`, which arranges variables in the order that you supply them to the function. Subsequently, we make the groups with `group_by()`, which makes groups in the order that the variables are supplied. When we are done working in the groups, we can ungroup the data again with `ungroup()`. For example, if we want to calculate the mean BMI per sex, we can do the following:

```{r}
#| code-fold: false
# Calculate mean BMI in strata of sex
sw <- sw %>%
    # Arrange for grouping
    arrange(sex) %>%
    # Group on sex
    group_by(sex) %>%
    # Calculate mean BMI
    mutate(mean_bmi = mean(bmi)) %>%
    # Ungroup again
    ungroup()
```

However, I am actually interested in the mean BMI per groups of sex and gender and only want to keep one row per group. For this, we can use `slice()`, which allows us subset rows based on their position.

```{r}
#| code-fold: false
# Calculate mean BMI in strata of sex
sw %>%
    # Arrange for grouping
    arrange(sex, gender) %>%
    # Group on sex and then gender
    group_by(sex, gender) %>%
    # Calculate mean BMI
    mutate(mean_bmi = mean(bmi)) %>%
    # Keep one row per group
    slice(1L) %>%           # Note that 1L means that 1 is an integer
    # Ungroup again
    ungroup() %>%
    # Keep only sex, gender, and mean BMI
    select(sex, gender, mean_bmi)

```

`slice()` is a general function but has some more specifications such as `slice_head()` and `slice_tail()` which you can read about in the `slice()` help function ([`?slice`](https://dplyr.tidyverse.org/reference/slice.html)).

## Summarising groups
Of course it is great to be able to calculate variables within groups, but there is an easier way to quickly get information on a group level with `summarise()`.

...

## Understanding pipelines
With the `{dplyr}` functions we have seen so far, we can manipulate our data quite easily and quickly. However, it might be confusing what some functions do, especially when a longer pipeline (i.e., multiple pipe operators) is used, such as the below example. If we want to better understand, we could run the code line for line and view the data frame to get a better understanding. However, external tools are also available to help you. 

```r
# Extensive pipeline
starwars %>%
    # Arrange for grouping
    arrange(sex) %>%
    # Group on sex
    group_by(sex) %>%
    # Create new variable BMI based on mass and height
    mutate(bmi = mass / (height / 100) ^ 2) %>%
    # Drop individuals with missing BMI
    filter(!is.na(bmi))

```

### Tidy data tutor
With [tidy data tutor](https://tidydatatutor.com), you can run your pipeline on data that can be loaded into R from packages, such as `starwars` from `{dplyr}`, and visualize what happens at each pipe operator. You can simply paste the pipeline and load in available data and run it to get a visualization. An example for the above code can be found [here](https://tidydatatutor.com/vis.html#code=library%28dplyr%29%0A%0A%23%20Extensive%20pipeline%0Astarwars%20%25%3E%25%0A%20%20%20%20%23%20Arrange%20for%20grouping%0A%20%20%20%20arrange%28sex%29%20%25%3E%25%0A%20%20%20%20%23%20Group%20on%20sex%0A%20%20%20%20group_by%28sex%29%20%25%3E%25%0A%20%20%20%20%23%20Create%20new%20variable%20BMI%20based%20on%20mass%20and%20height%0A%20%20%20%20mutate%28bmi%20%3D%20mass%20/%20%28height%20/%20100%29%20%5E%202%29%20%25%3E%25%0A%20%20%20%20%23%20Drop%20individuals%20with%20missing%20BMI%0A%20%20%20%20filter%28!is.na%28bmi%29%29&d=2023-07-18&lang=r&v=v1).

### Microsoft datamations
Another possibliity is `{datamations}`, which gives you animations of how the pipeline operates. To use `{datamations}`, you can first install it with:

```r
# Install datamations from github
devtools::install_github("microsoft/datamations")
```

Next, you can write your pipeline as you normally would. Subsequently, put the whole pipeline between apostrophes to turn it into a string and use `datamation_sanddance()` to generate the animation:

```r
"# Pipeline
starwars %>%
    # Remove hermaphroditic sex as this gives a large outlier
    filter(sex != 'hermaphroditic') %>%
    # Calculate BMI
    mutate(bmi =mass / (height / 100) ^ 2) %>%
     # Group on sex
    group_by(sex) %>%
    # Get mean BMI per group
    summarise(mean_bmi = mean(bmi))" %>% 
    # Get animation
    datamation_sanddance()
```

Note that `{datamations}` cannot use every `{dplyr}` function however. More information on `{datamations}` can be found [here](https://github.com/microsoft/datamations).

## Other useful functions

## Extensions
### `{dtplyr}`


### `{dbplyr}`
{
  "hash": "dcc5b1d30ae6ae3ce49074bf2fdaeda9",
  "result": {
    "markdown": "---\ntitle: \"Dplyr\"\n---\n\n\n## Dplyr\n`{dplyr}`, a combination of data and plier, is a package that allows manipulation of data in an easy and efficient way. Whether you want to drop columns, drop rows, create new variables, or change old variables, `{dplyr}` allows you to do this in an intuitive way which requires little code (especially compared to base R). If you have not already installed and loaded `{dplyr}`, you can do so with:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# Load dplyr\npacman::p_load(\"dplyr\")\n```\n:::\n\n\nIn this section, we will work with the `starwars` dataset, that is automatically loaded in when you load `{dplyr}`. \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# Show first 5 rows of starwars\nhead(starwars, n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 14\n  name      height  mass hair_color skin_color eye_color birth_year sex   gender\n  <chr>      <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n1 Luke Sky…    172    77 blond      fair       blue            19   male  mascu…\n2 C-3PO        167    75 <NA>       gold       yellow         112   none  mascu…\n3 R2-D2         96    32 <NA>       white, bl… red             33   none  mascu…\n4 Darth Va…    202   136 none       white      yellow          41.9 male  mascu…\n5 Leia Org…    150    49 brown      light      brown           19   fema… femin…\n# ℹ 5 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>\n```\n:::\n:::\n\n\nLet's load the `starwars` data into our Global Environment so that we can easily access it:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# Load starwars into Global Environment object called sw\nsw <- starwars\n```\n:::\n\n\nAll `{dplyr}` functions that take a data frame or tibble start with the `.data` argument. Therefore, in all examples below, we first specify our `.data` as `sw` before supplying arguments of the function.\n\n## Renaming and relocating\nBefore we can do anything to the data itself, we should make sure we like the names of the variables. Three of the variables contain the word 'color' (`hair_color`, `skin_color`, `eye_color`). However, we might think it is intuitive enough that these variables indicate colour, so maybe we want to change those names. For this we can use the function `rename()`. In `rename()`, we specify any number of arguments we want, where the left hand side of the argument indicates the new column name and the righth and side of the argument indicates the column that needs to be changed (and therefore the old column name). The right hand side can also be the position of the column (e.g., 2 for the second column).\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# Rename variables\nsw <- rename(sw, hair = hair_color, skin = skin_color, eye = eye_color)\n```\n:::\n\n\n:::{.callout-tip appearance=\"simple\"}\nMany functions, among which functions in `{dplyr}` like `rename()` have an argument called `...`. This ellipsis simply means that you can supply any number of arguments of the type that the function uses. For `rename()`, this means we can supply an endless list of variables to be renamed.\n:::\n\nNow our data has some changed names, but we are not done yet. It might also be preferable that sex and gender are mentioned immediately after the name. To do this, we can simply use `relocate()`. In `relocate()`, we specify a group of columns and specify before (argument `.before`) or after (argument `.after`) which column they should be placed.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# Relocate variables\nsw <- relocate(sw, sex:gender, .after = name)\n\n# This has the same effect\nsw <- relocate(sw, c(sex, gender), .before = height)\n```\n:::\n\n\n## Filtering and selecting\nNow that our data is a bit more how we (or I?) wanted it, we can also determine whether there are some columns or rows that we do not actually want or need. First of, because I am not interested in any data from outside the starwars universe, we can remove the column `films`. To do this, we use `select()`, which allows us to either specify the columns we want to keep, or specify the columns we want to drop. To keep columns, we simply name them and to drop columns we name them with a dash/minus sign before (-).\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# Drop films column\nsw <- select(sw, -films)\n\n# This does the same thing\nsw <- select(sw, name:species, vehicles:starships)\n```\n:::\n\n\nAdditionally, I am not interested in any character (i.e., row) of who we do not know the mass or who is from Tatooine. Tatooine is full of sand and I don't like sand. It's coarse and rough. To remove rows, we can use the `filter()` function. In `filter()`, we supply conditions to which rows must adhere to stay. \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# Remove rows with missing mass or with characters from Tatooine\nsw <- filter(sw, !is.na(mass) & !is.na(height) & homeworld != \"Tatooine\")\n```\n:::\n\n\nHere, we use `is.na()` to see what rows are missing in the column `mass` and then take the reverse (!). We do the same for `height`. Additionally (&), the homeworld should not equal (!=) Tatooine.\n\n## Mutating and conditionals\nNow that we have the data that we want, we might want to create some new variables. For instance, it would be interesting to know the Body Mass Index (BMI) of the characters, which we can calculate because we have height and mass. We can do that with `mutate()`. In this function, we can specify any number of arguments, with the left hand side of the argument being the name of the new variable and the right hand side being the value it should take.\n\nA great characteristic of `mutate()` is that we can immediately use a variable we just calculted within the same `mutate()` function call. For instance, if we calculate BMI, we can immediately create a variable that indicates whether according to commonly used BMI dichotomisation for humans, a character classifies as overweight or not.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# Calculate BMI and overweight indicator\nsw <- mutate(sw, \n             # Change height to meters\n             height = height / 100,\n             # Calculate BMI\n             bmi = mass / height ^ 2,\n             # Create indicator for overweight\n             overweight = ifelse(bmi >= 25, 1, 0))\n\n# Show summary of BMI\nsummary(sw[[\"bmi\"]])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  12.89   19.48   23.83   32.47   25.86  443.43 \n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\n# Show table of overweight\ntable(sw[[\"overweight\"]])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n 0  1 \n32 16 \n```\n:::\n:::\n\n\nWhat we used to create the overweight variable was an if-else clause, which is a commonly used clause in programming. Simply, it checks whether a condition is true. If a condition is true, then it does A, otherwise it does B. In this case, `ifelse()` checks the condition `bmi >= 25`. If that condition is `TRUE`, then the variable `overweight` is assigned a 1, otherwise a 0.\n\nIf we want to be able to assign more than two values based on a single conditions, we can use two approaches. First, we can nest multiple `ifelse()` statements. Below, we code a variable `weight_status` which indicates underweight (BMI < 18, 1), normal weight (BMI 18-25, 2), overweight (BMI >25, 3), and obesity (BMI >30, 4).\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# Create new variable weight status\nsw <- mutate(sw, \n             # Create indicator for weight status\n             weight_status = ifelse(bmi < 18, 1,\n                                    ifelse(bmi >= 18 & bmi <= 25, 2,\n                                           ifelse(bmi > 25 & bmi <= 30, 3, 4))))\n```\n:::\n\n\nThis can quickly become unreadable if more groups should be made. Luckily, `{dplyr}` offers us `case_when()` and `case_match()`. Using `case_when()`, we only need to call one function and then supply all conditions. In `case_when()` this is written as condition ~ result:\n\n```r\n# Create new variable weight status\nsw <- mutate(sw, \n             # Create indicator for weight status\n             weight_status = case_when(bmi < 18 ~ 1,\n                                       bmi >= 18 & bmi <= 25 ~ 2,\n                                       bmi > 25 & bmi <= 30 ~ 3,\n                                       .default = 4))\n```\n\nWe also specify `.default = 4`, which means that any row without a matched condition should receive the value 4. However, be careful if you have missing data, as `.default` will also fill in those values. If `.default` is not supplied, any row not matching a condition will get an `NA`.\n\n`case_when()` is a great function and especially useful for multiple conditions that can be matched based on multiple columns or when we want to use conditions (>, <=, *etc*).  Nonetheless, if we want to use only a single variable and do not need conditions, we can also use `case_match()`, where first the used variable is specified and then the matches, without having to respecify the variable in every match:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# Create new variable weight status\nsw <- mutate(sw,\n             # Create indicator for weight status\n             weight_status = case_match(species,\n                                        \"Human\" ~ \"Humanoid\",\n                                        \"Yoda's species\" ~ \"Small, green, and wrinkly with pointy ears\",\n                                        .default = species))\n```\n:::\n\n\n## Working across columns\nThere might be a case where we want to change all numeric variables to character. In such case, we could write an extensive mutate argument as follows:\n\n```r\n# Change numerics to character\nsw <- mutate(sw,\n             # Change height\n             height = as.character(height),\n             # Change mass\n             mass = as.character(mass),\n             # Change birth year\n             birth_year = as.character(birth_year),\n             # Change BMI\n             bmi = as.character(bmi))\n\n```\n\nEven without the way of annotating that I try to circulate, this code would be unefficient to write. `{dplyr}` offers us `across()` to make our lives easier in such cases. With `across()`, we can apply multiple functions immediately to mulitple columns. If we want to change all those columns to character and check how many characters each has, we could simply do:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# Change numerics to character and show last 7 columns\nmutate(sw, across(c(height, mass, birth_year, bmi), list(char = as.character, charn = nchar)))[18:24]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 48 × 7\n   height_charn mass_char mass_charn birth_year_char birth_year_charn bmi_char  \n          <int> <chr>          <int> <chr>                      <int> <chr>     \n 1            4 32                 2 33                             2 34.722222…\n 2            3 49                 2 19                             2 21.777777…\n 3            4 77                 2 57                             2 23.245984…\n 4            4 112                3 200                            3 21.545090…\n 5            3 80                 2 29                             2 24.691358…\n 6            4 74                 2 44                             2 24.725182…\n 7            4 1358               4 600                            3 443.42857…\n 8            3 77                 2 21                             2 26.643598…\n 9            3 110                3 <NA>                          NA 33.950617…\n10            3 75                 2 82                             2 25.951557…\n# ℹ 38 more rows\n# ℹ 1 more variable: bmi_charn <int>\n```\n:::\n:::\n\n\n## The pipe: `%>%`\nBefore we continue with other useful `{dplyr}` functions, we should talk about the pipe operator `%>%`. Although `%>%` is not originally from `{dplyr}` but instead imported from `{magrittr}` that we will discuss after this section.\n\nNormally, if we wanted to apply multiple functions at the same time (for instance, `filter()` and `select()` after one another), we would nest the functions:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# Keep only the birth year column and then keep only birth years above 100\nfilter(select(starwars, birth_year), birth_year > 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 1\n  birth_year\n       <dbl>\n1        112\n2        200\n3        600\n4        896\n5        102\n```\n:::\n:::\n\n\nHowever, this quickly becomes unreadable. With `%>%`, we can transform this into more readable code. What `%>%` does is that it takes the outputted result from the previous function and feeds it into an argument in the next function called `.data` or `data` (if this argument is available). We will go into more detail in [`{magrittr}`](magrittr.qmd).\n\nSo, with `%>%`, we can rewrite the above code as:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# Take starwars data\nstarwars %>%\n    # Keep only birth year column\n    select(birth_year) %>%\n    # Keep only birth years above 100\n    filter(birth_year > 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 1\n  birth_year\n       <dbl>\n1        112\n2        200\n3        600\n4        896\n5        102\n```\n:::\n:::\n\n\n:::{.callout-tip appearance=\"simple\"}\nSome more about annotation: with pipe operators, we can make our code much clearer and with that also our annotations. My personal preference is to annotate each new function after a pipe, so that it becomes even more readable. These annotations might just describe what we are doing, or give more details about why we are doing it. This makes it understandable to people who might not understand R equally well or know the functions we are using and allows better understanding of choices we made.\n:::\n\n## Grouping and slicing\nNow that we know about pipe operators, we can apply them to some nice `{dplyr}` functions. Sometimes, we might want to calculate some statistics per group in our data. To do this, we can group the data on the variable(s) that define the groups and then run our analyses. Before we group, we must make sure the data are sorted so that all variables are already ordered in groups. We can do this with `arrange()`, which arranges variables in the order that you supply them to the function. If you want to arrange a variable in descending order, you can wrap it in `desc()`. Subsequently, we make the groups with `group_by()`, which makes groups in the order that the variables are supplied. When we are done working in the groups, we can ungroup the data again with `ungroup()`. For example, if we want to calculate the mean BMI per sex, we can do the following:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# Calculate mean BMI in strata of sex\nsw <- sw %>%\n    # Arrange for grouping\n    arrange(sex) %>%\n    # Group on sex\n    group_by(sex) %>%\n    # Calculate mean BMI\n    mutate(mean_bmi = mean(bmi)) %>%\n    # Ungroup again\n    ungroup()\n```\n:::\n\n\nHowever, I am actually interested in the mean BMI per groups of sex and gender and only want to keep one row per group. For this, we can use `slice()`, which allows us subset rows based on their position.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# Calculate mean BMI in strata of sex\nsw %>%\n    # Arrange for grouping\n    arrange(sex, gender) %>%\n    # Group on sex and then gender\n    group_by(sex, gender) %>%\n    # Calculate mean BMI\n    mutate(mean_bmi = mean(bmi)) %>%\n    # Keep one row per group\n    slice(1L) %>%           # Note that 1L means that 1 is an integer\n    # Ungroup again\n    ungroup() %>%\n    # Keep only sex, gender, and mean BMI\n    select(sex, gender, mean_bmi)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 3\n  sex            gender    mean_bmi\n  <chr>          <chr>        <dbl>\n1 female         feminine      18.2\n2 hermaphroditic masculine    443. \n3 male           masculine     24.9\n4 none           masculine     34.7\n5 <NA>           <NA>          15.1\n```\n:::\n:::\n\n\n`slice()` is a general function but has some more specifications such as `slice_head()` and `slice_tail()` which you can read about in the `slice()` help function ([`?slice`](https://dplyr.tidyverse.org/reference/slice.html)).\n\n### Grouping functions\nWhen we group our data, we can also extract some metadata about the groups we created with the following functions:\n\n- `group_data()`: metadata that defines the grouping structure\n\n- `group_keys()`: metadata that describes the groups\n\n- `group_rows()`:  location of the rows in the original data per group\n\n- `group_indices()`: a vector with the group to which each row belongs\n\n- `group_vars()`: names of the grouping variables as a character\n\n- `groups()`: names of the grouping variables as a list \n\n- `group_size()`: size of each group\n\n- `n_groups()`: the number of groups\n\n## Summarising groups\nOf course it is great to be able to calculate variables within groups, but there is an easier way to quickly get information on a group level with `summarise()`. This function creates a new data frame with any summary statistic that we specify per group. For instance, to calculate the mean and standard deviation of the birth year and the proportion of individuals without hair per planet, we can do:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# Use starwars\nsw %>%\n    # Arrange for grouping\n    arrange(sex) %>%\n    # Group on sex\n    group_by(sex) %>%\n    # Calculate summary statistics\n    summarise(# Mean\n              mean = mean(birth_year, na.rm = TRUE),\n              # Standard deviation\n              sd = sd(birth_year, na.rm = TRUE),\n              # Proportion of no hair\n              prop_no_hair = sum(hair == \"none\", na.rm = TRUE) / n())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 4\n  sex             mean    sd prop_no_hair\n  <chr>          <dbl> <dbl>        <dbl>\n1 female          42.2  14.5        0.375\n2 hermaphroditic 600    NA          0    \n3 male            57.6  42.5        0.568\n4 none            33    NA          0    \n5 <NA>           NaN    NA          1    \n```\n:::\n:::\n\n\n:::{.column-margin}\nThe code for calculating the proportion of no hair was kindly supplied by Vera Broek.\n:::\n\nNote that the `NA`s in the output result from the fact that we cannot take the standard deviation of a single observation. One of the functions we used was `n()`. This is one of the context functions supplied by `{dplyr}`, which allows us to quickly compute a group-specific variable. The available context functions are:\n\n- `n()`: the number of rows/observations in the group\n\n- `cur_group()`: the group keys (grouping variables)\n\n- `cur_group_id()`: gives the group a unique identifier\n\n- `cur_group_rows()`: gives the row indices in the ungrouped data for the current group\n\n- `cur_column()`: gives the name of the current column (only works in `across()`)\n\n### Count and tally\n`tally()` and `count()` are two wrappers around summarise:\n\n- `tally()` is equal to summarise but automatically calls `n()` (if it's the first tally) or `sum()` (if it's the second tally), and therefore an easy shorthand for `summarise(n = n())`.\n\n- `count()` is equal to `group_by()` followed by `summarise(n = n())` and closed with `ungroup()`.\n\n## Joins\nThere might be times where we work with data that is stored in different data sets. If we want to combine these data sets, e.g., `x` and `y`, into one bigger data set, we will often want to do this on the basis of one or more variables, such as a unique study participant identifier and/or a visit number. In this case, we can use joins from `{dplyr}`, which offers four joins. These joins all add the data together, but differ in what they do with individuals that are not matched in either dataset.\n\n| Function      | Will keep all observations in | Can drop observations in   |\n|---------------|-------------------------------|----------------------------|\n|`inner_join()` | *neither*                     | `x` and `y`                | \n|`left_join()`  | `x`                           | `y`                        |\n|`right_join()` | `y`                           | `x`                        |\n|`full_join()`  | `x` and `y`                   | *neither*                  |\n\nTo use a join function, we use a pipe operator after the data we want to be joined on (`x`) and then specify on what column we want to join the data.\n\n```r\n# Get some columns from starwars\nstarwars_x <- starwars[, 1:3]\n\n# Get some more columns from starwars\nstarwars_y <- starwars[, c(1, 4:6)]\n\n# Join data together based on the name\nstarwars_z <- starwars_x %>%\n    # Join some more columns from starwars\n    left_join(starwars_y, \"name\")\n\n```\n\nIf we would want to join on more columns than only `name`, we can put the joining columns in a vector with `c()`.\n\n## Understanding pipelines\nWith the `{dplyr}` functions we have seen so far, we can manipulate our data quite easily and quickly. However, it might be confusing what some functions do, especially when a longer pipeline (i.e., multiple pipe operators) is used, such as the below example. If we want to better understand, we could run the code line for line and view the data frame to get a better understanding. However, external tools are also available to help us. \n\n```r\n# Extensive pipeline\nstarwars %>%\n    # Arrange for grouping\n    arrange(sex) %>%\n    # Group on sex\n    group_by(sex) %>%\n    # Create new variable BMI based on mass and height\n    mutate(bmi = mass / (height / 100) ^ 2) %>%\n    # Drop individuals with missing BMI\n    filter(!is.na(bmi))\n\n```\n\n### Tidy data tutor\nWith [tidy data tutor](https://tidydatatutor.com), we can run your pipeline on data that can be loaded into R from packages, such as `starwars` from `{dplyr}`, and visualize what happens at each pipe operator. We can simply paste the pipeline and load in available data and run it to get a visualization. An example for the above code can be found [here](https://tidydatatutor.com/vis.html#code=library%28dplyr%29%0A%0A%23%20Extensive%20pipeline%0Astarwars%20%25%3E%25%0A%20%20%20%20%23%20Arrange%20for%20grouping%0A%20%20%20%20arrange%28sex%29%20%25%3E%25%0A%20%20%20%20%23%20Group%20on%20sex%0A%20%20%20%20group_by%28sex%29%20%25%3E%25%0A%20%20%20%20%23%20Create%20new%20variable%20BMI%20based%20on%20mass%20and%20height%0A%20%20%20%20mutate%28bmi%20%3D%20mass%20/%20%28height%20/%20100%29%20%5E%202%29%20%25%3E%25%0A%20%20%20%20%23%20Drop%20individuals%20with%20missing%20BMI%0A%20%20%20%20filter%28!is.na%28bmi%29%29&d=2023-07-18&lang=r&v=v1).\n\n### Microsoft datamations\nAnother possibliity is `{datamations}`, which gives us animations of how the pipeline operates. To use `{datamations}`, you can first install it with:\n\n```r\n# Install datamations from github\ndevtools::install_github(\"microsoft/datamations\")\n```\n\nNext, we can write your pipeline as you normally would. Subsequently, we put the whole pipeline between apostrophes to turn it into a string and use `datamation_sanddance()` to generate the animation:\n\n```r\n\"# Pipeline\nstarwars %>%\n    # Remove hermaphroditic sex as this gives a large outlier\n    filter(sex != 'hermaphroditic') %>%\n    # Calculate BMI\n    mutate(bmi =mass / (height / 100) ^ 2) %>%\n     # Group on sex\n    group_by(sex) %>%\n    # Get mean BMI per group\n    summarise(mean_bmi = mean(bmi))\" %>% \n    # Get animation\n    datamation_sanddance()\n```\n\nNote that `{datamations}` cannot use every `{dplyr}` function however. More information on `{datamations}` can be found [here](https://github.com/microsoft/datamations).\n\n## Other useful functions\nWe now discussed some of the most useful functions in `{dplyr}`, but there are other useful functions available. This list is not meant to make you remember everything, but more so to introduce you to them once, so that you might recognize when you are trying to perform an operation for which `{dplyr}` has an efficient implementation. Moreover, this list is not exhaustive, but just a selection of useful functions; for everything available in `{dplyr}`, see [here](https://www.rdocumentation.org/packages/dplyr/versions/1.0.10).\n\n### Selecting parts of our data\n\n- `pull()`: we can extract a single column with `pull()`, which is similar to subsetting with the `$` operator.\n\n- `pick()`: if we are inside a function such as `mutate()` or `summarise()`, we can use `pick()` to subset multiple columns.\n\n- `slice_sample()`: select random rows. This is especially useful if you have a rather large data set and first want to test your code on a random subset of your data before running it on the complete data, which might take longer.\n\n- `distinct()`: keep only one row per unique combination of columns supplied to the function. This function drops all columns not specified, unless `.keep_all = TRUE`.\n\n### Getting information on and in our data\n\n- `lag()`: take a column's value from the previous row (will be `NA` for the first row).\n\n- `lead()`: take a column's value from the next row (will be `NA` for the last row).\n\n- `first()`, `last()`, and `nth()`: take the first, last, or nth (can be specified in the function) value in a column.\n\n- `n_distinct()`: count the total number of unique values.\n\n- `glimpse()`: get a quick glimpse of your data, similar to pressing on the blue button in front of the data in the global environment.\n\n### Manipulating our data\n\n- `rows()`: perform row-based modifications on a data frame using information in another data frame. See `?rows` for a detailed explanation.\n\n- `bind_rows()`: add data frames together based on rows. This is a more efficient implementation of `rbind()` and does not require the different data frames to all have the same columns (the final data frame will have all columns of the individual data frames that are bound).\n\n- `bind_cols()`: similar to `bind_rows()` but for columns, improving on `cbind()`.\n\n- `rowwise()`: perform a function per row in the data. This is useful when a vectorized function (i.e., a function that operates over the entire vector) is not available. For more detailed explanation, see `?rowwise`.\n\n- `na_if()`: replace a certain value `y` in vector `x` with `NA`.\n\n- `if_else()`: an improved version of `ifelse()` that can also take into account missings.\n\n## Extensions\n### `{dtplyr}`\n`{data.table}` is a package that works with data frames at a much higher speed than other R packages. Although `{data.table}` is discussed in more detail in [another section](datatable.qmd), here we shortly discuss the `{dplyr}` integration with `{data.table}`.\n\nWe can use `lazy_dt()` to create a data table that tracks any operations and then transform it using `as.data.table()`, `as.data.frame()`, or `as_tibble()`.\n\nAlthough `{dtplyr}` is not as fast as `{data.table}`, it does allow using the readable `{dplyr}` while approaching the speed of `{data.table}`. \n\n### `{dbplyr}`\nSometimes, our data is not stored locally but in a remote database, such as SQL. In that case, you can use `{dbplyr}` to manipulate the data as if it were in-memory using `{dplyr}` functionality. \n\nUsing the `dbConnect()` from `{DBI}`, we can connect a data base from SQL to an object in R and then manipulate it. Behind the scenes, your R code is translated into SQL code. To get started, you can look up the vignette (`vignette(sql)`) or see [here](https://dbplyr.tidyverse.org/) and [here](https://dbplyr.tidyverse.org/articles/sql.html).\n\n### `{sparklyr}`\nApache Spark is a powerful framework for processing data quickly and efficiently. It is popular due to it's speed with big data. Although not officially a `{dplyr}` extension, `{dplyr}` and other R code can be used to access Apache Spark through `{sparklyr}`. You can find more information [here](https://spark.rstudio.com/).\n\n## Wrapping up\nWe now saw the majority of functions that `{dplyr}` offers us to manipulate our data into taking the shape we want it to take. If you ever want to have a quick look at what functions are available again, without the explanations in this tutorial, you can check out the [`{dplyr}` reference guide](https://dplyr.tidyverse.org/reference/index.html) or the [documentation](https://www.rdocumentation.org/packages/dplyr/versions/1.0.10).\n\n## Exercises\n### 1. Subset data\nFrom the data `mtcars`, keep only cars with a weight (`wt`) of 3 or higher and store this into an object `dat`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- filter(mtcars, wt >= 3)\n```\n:::\n\n\n### 2. Create weight category\nCreate a column `wt_cat` categorizing `wt` into smaller than 4 (0) and 4 or greater (1) in `dat`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Solution 1: using ifelse\ndat <- mutate(dat, wt_cat = ifelse(wt < 4, 0, 1))\n\n# Solution 2: using if_else\ndat <- mutate(dat, wt_cat = if_else(wt < 4, 0, 1))\n\n# Solution 3: using case_when\ndat <- mutate(dat, wt_cat = case_when(wt < 4 ~ 0, .default = 1))\n```\n:::\n\n\n### 3. Drop columns\nRemove the `hp` and `vs` columns from `dat`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- select(dat, -c(hp, vs))\n```\n:::\n\n\n### 4. Get group statistics\nDetermine the number of cars for each level of `cyl`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Solution 1: using group_by and summarise\ndat %>%\n    # Arrange data for grouping\n    arrange(cyl) %>% \n    # Group per level of cylinders\n    group_by(cyl) %>% \n    # Get count per level of cylinders\n    summarise(n = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n    cyl     n\n  <dbl> <int>\n1     4     2\n2     6     4\n3     8    14\n```\n:::\n\n```{.r .cell-code}\n# Solution 2: using group_by and tally\ndat %>%\n    # Arrange for grouping\n    arrange(cyl) %>%\n    # Group per level of cylinders\n    group_by(cyl) %>%\n    # Tally per group of cylinders\n    tally()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n    cyl     n\n  <dbl> <int>\n1     4     2\n2     6     4\n3     8    14\n```\n:::\n\n```{.r .cell-code}\n# Solution 3: using count\ndat %>%\n    # Arrange for grouping\n    arrange(cyl) %>%\n    # Count per group of cylinders\n    count(cyl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  cyl  n\n1   4  2\n2   6  4\n3   8 14\n```\n:::\n\n```{.r .cell-code}\n# Solution 4: using gropu_by and mutate\ndat %>%\n    # Arrange for grouping\n    arrange(cyl) %>%\n    # Group per level of cylinders\n    group_by(cyl) %>%\n    # Per group, calculate number of cylinders\n    mutate(n = n()) %>%\n    # Per group, keep one row\n    slice(1L) %>%\n    # Ungroup again\n    ungroup() %>%\n    # Keep only relevant columns\n    select(cyl, n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n    cyl     n\n  <dbl> <int>\n1     4     2\n2     6     4\n3     8    14\n```\n:::\n:::\n\n\n### 5. Put it all in a pipeline\nNow perform exercises 1 through 4 but use one continuous pipeline\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# You can combine any of the solutions of exercise 1 through 4, here I show just one:\ndat <- mtcars %>%\n    # Keep only cars with weight >= 3\n    filter(wt >= 3) %>%\n    # Create category for weight\n    mutate(wt_cat = ifelse(wt < 4, 0, 1)) %>%\n    # Remove columns hp and vs\n    select(-c(hp, vs)) %>%\n    # Arrange for grouping\n    arrange(cyl) %>%\n    # Count per group of cylinders\n    count(cyl)\n```\n:::\n\n\n## Next topic\nNow that we know the grammar of `{dplyr}`, we can see how `{tidyr}` assists us if the data we want to manipulate is not quite tidy enough yet.\n\n**Next:** [Tidyr](tidyr.qmd)",
    "supporting": [
      "dplyr_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
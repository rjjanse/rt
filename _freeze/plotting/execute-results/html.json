{
  "hash": "46f210ad1357b672fb66933f0cf52d7d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Plotting\"\n---\n\n\n\n\n## Plotting in R\nA lot of analyses are represented by figures in the final papers. Additionally, visualization of data may allow better scrutiny of data patterns. As such, creating figures in R, or 'plotting' (because we are making plots).\n\nThe way plots are created varies, but two large methods stand out. The first we will discuss is implemented by the `{ggplot2}` package. This package is based on the grammar of graphics, a landmark work on statistical graphics (ergo 'gg' for 'grammr of graphics'). The second method we will discuss is the base R plotting, which is part of the R `{graphics}` package.\n\nAs example data, we will use the package `{palmerpenguins}`, which contains data on 344 penguins from three islands in the Palmer Archipelago, Antarctica (more [here](https://allisonhorst.github.io/palmerpenguins/)).\n\nWe will also load the `{ggplot2}` package. The `{graphics}` package is installed and loaded by default.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# Load packages\npacman::p_load(\"ggplot2\",          # Data visualization\n               \"palmerpenguins\"    # Example data\n               )\n```\n:::\n\n\n\n\n## `{ggplot2}`\nBasically, the grammar of graphics provides a foundation that describes how any statistical graphic can be build up, which is based on layers. This layered system gives rise to how the package `{ggplot2}` allows us to create figures (i.e. plots).\n\n### Layer 1: the data\nThe first layer we specify is the data layer. In this layer, we specify our data and the mapping of the aesthetics, meaning we define what our x-axis will portray, the y-axis, what colours, etc. will portray. This first layer is called using `ggplot()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nggplot(penguins, aes(x = body_mass_g, y = flipper_length_mm))\n```\n\n::: {.cell-output-display}\n![](plotting_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n\nHere, we specified the first argument (`data = penguins`) to be our dataset. For the second argument (`mapping = aes()`), we supply a function: `aes()`. This function allows us to specify what will make up the aesthetics of the graph: the x-axis will be 'body_mass_g' and the y-axis will be 'flipper_length_mm'. Because we did not supply any other layer, we can see that the figure remains largely empty, only having some automatically set limits and titles for the axes.\n\n### Layer 2: the geometries\nNow we can add the geometries. We are offered a large number of geometries by `{ggplot2}`, with some basics including points, lines, bars, histograms, rectangles, segments, steps, and ribbons. Each geometry is called by a `geom_...()` function, such as `geom_point()` and `geom_line()`.\n\nFor our figure, we will add points.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nggplot(penguins, aes(x = body_mass_g, y = flipper_length_mm)) +\n    # Geometries\n    geom_point()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](plotting_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n\nYou may notice that layers in these plots are added together by using a plus (`+`) sign. Additionally, the warning you is just `{ggplot2}` telling you there were some `NA`'s that could not be drawn in the plot. Note that this error is also given if you have some values that are outside of the boundaries of your plot.\n\nWithin each geometry, we can edit many things, such as the colour, fill (i.e. the colour of shapes that contain an inside), size, alpha (i.e. transparency), and shape (or linetype for lines). Much more is possible, but can be learned from the help functions for each geometry.\n\nNote that any geometry is applied in subsequent order. If we add a trendline (`geom_smooth(method = \"lm\", formula = \"y ~ x\")`), this will be drawn on top of the points if we specify it after `geom_point()` or before if we specify it before `geom_point()`.\n\nLet's do this now:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nggplot(penguins, aes(x = body_mass_g, y = flipper_length_mm)) +\n    # Geometries\n    geom_point(shape = 5) +\n    geom_smooth(method = \"lm\", formula = \"y ~ x\", colour = \"#B58900\", fill = \"#B58900\", alpha = 0.3) \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](plotting_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\nWe specified shape as a number, for which you can find [online](http://www.sthda.com/english/wiki/ggplot2-point-shapes) what different numbers mean. We specified the colour as a hex code, but you can also use the `rgb()` function for RGB specification, or English language for a number of colours that can be found [here](https://r-charts.com/colors/). Lastly, we specify the British English colour instead of the American English color. `{ggplot2}` will accept both, for arguments and for functions (e.g. `scale_color_manual()` and `scale_colour_manual()` both exist and do the same thing).\n\n### Layer 3: the scaling\nFor the third layer, we will apply scaling, which means we will edit anything that can be a scale (e.g. axes, colours, fill).\n\n::: {.callout-note}\nNote that we deviate from the grammar of graphics in building our plot. The order in which we specify our layers does not adhere to the grammar of graphics. Luckily, in the background, `{ggplot2}` ignores this, only keeping the order in which we called geometries for geometries, but for instance not drawing theming prior to geometries, even if we specify so.\n:::\n\nIn our current plot, we have two scales: the x-axis and y-axis. We can edit these using scale functions that concur with the scale type (i.e. continuous, discrete, etc.). In our case, both scales are continuous, so we will use `scale_x_continuous()` and `scale_y_continuous()`. For other types of scales, we might also use `scale_x_discrete()`, `scale_x_date()`, etc.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nggplot(penguins, aes(x = body_mass_g, y = flipper_length_mm)) +\n    # Geometries\n    geom_point(shape = 5) +\n    geom_smooth(method = \"lm\", formula = \"y ~ x\", colour = \"#B58900\", fill = \"#B58900\", alpha = 0.3) +\n    # Scaling\n    scale_x_continuous(name = \"Body mass (grams)\",\n                       limits = c(2500, 6500),\n                       breaks = seq(2500, 6500, 500),\n                       labels = prettyNum(seq(2500, 6500, 500), big.mark = \",\")) +\n    scale_y_continuous(name = \"Flipper length (millimeters)\",\n                       limits = c(170, 240),\n                       breaks = seq(170, 240, 10))                     \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](plotting_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\nIn the scale functions, we can give the name of the axis, the limits of the axis, at which points there should be ticks (`breaks`), and the labels given to each tick.\n\nOne more thing we can do in the scale functions is determine the expansion. By default, `{ggplot2}` expands the axes a bit so that the figure does not seem too cropped. Sometimes, however, we might want to remove or change this. If we want to remove this, we can use `expand = c(0, 0)` in the scaling arguments for each axis:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nggplot(penguins, aes(x = body_mass_g, y = flipper_length_mm)) +\n    # Geometries\n    geom_point(shape = 5) +\n    geom_smooth(method = \"lm\", formula = \"y ~ x\", colour = \"#B58900\", fill = \"#B58900\", alpha = 0.3) +\n    # Scaling\n    scale_x_continuous(name = \"Body mass (grams)\",\n                       limits = c(2500, 6500),\n                       breaks = seq(2500, 6500, 500),\n                       labels = prettyNum(seq(2500, 6500, 500), big.mark = \",\"),\n                       expand = c(0, 0)) +\n    scale_y_continuous(name = \"Flipper length (millimeters)\",\n                       limits = c(170, 240),\n                       breaks = seq(170, 240, 10))                     \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](plotting_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\nAbove we only removed the expansion for the y-axis. We can also change the amount of expansion (by addition or multiplication) by supplying the `expansion()` function to the `expand = ` argument. We will leave the expansion to its default again while working on our example.\n\n### Layer 4: labels\nIn the next layer, we will apply labels to the plot, which includes the title, subtitle, axes labels, and legends.\n\nFor the axes labels, we can use `xlab()` and `ylab()` respectively. We won't need these as we specified the name already in the scaling function, but they \nmight be useful if you do not need the scale function. The title can be specified using the `ggtitle()` function, which also allows you to specify a subtitle. Alternatively,\nthis can be done through the `labs()` function, which allows much more control, such as a tag (for multipanel labels where you want to tag A, B, C, etc.), a caption, and \nalt text (for accessibility purposes).\n\nFor the plot we're building, we will aply a title and a subtitle.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nggplot(penguins, aes(x = body_mass_g, y = flipper_length_mm)) +\n    # Geometries\n    geom_point(shape = 5) +\n    geom_smooth(method = \"lm\", formula = \"y ~ x\", colour = \"#B58900\", fill = \"#B58900\", alpha = 0.3) +\n    # Scaling\n    scale_x_continuous(name = \"Body mass (grams)\",\n                       limits = c(2500, 6500),\n                       breaks = seq(2500, 6500, 500),\n                       labels = prettyNum(seq(2500, 6500, 500), big.mark = \",\")) +\n    scale_y_continuous(name = \"Flipper length (millimeters)\",\n                       limits = c(170, 240),\n                       breaks = seq(170, 240, 10)) +\n    # Labels\n    ggtitle(\"Relation between penguin body mass and flipper length\", subtitle = \"Data from the Palmer Archipelago penguins\")                 \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](plotting_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n### Layer 5: coordinates and transformations\n#### `coord_cartesian()`\nWe have already seen that we can limit our axes using the `limits` argument in the scaling functions. However, if we limit our axis too much, data that falls outside of this range will be removed. If we want to limit the axes without data being removed, we can use the arguments `xlim =` and `ylim =` in the function `coord_cartesian()`. As an example:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nggplot(penguins, aes(x = body_mass_g, y = flipper_length_mm)) +\n    # Geometries\n    geom_point(shape = 5) +\n    geom_smooth(method = \"lm\", formula = \"y ~ x\", colour = \"#B58900\", fill = \"#B58900\", alpha = 0.3) +\n    # Scaling\n    scale_x_continuous(name = \"Body mass (grams)\",\n                       limits = c(2500, 6500),\n                       breaks = seq(2500, 6500, 500),\n                       labels = prettyNum(seq(2500, 6500, 500), big.mark = \",\")) +\n    scale_y_continuous(name = \"Flipper length (millimeters)\",\n                       limits = c(170, 240),\n                       breaks = seq(170, 240, 10)) +\n    # Labels\n    ggtitle(\"Relation between penguin body mass and flipper length\", subtitle = \"Data from the Palmer Archipelago penguins\") +\n    # Transformations\n    coord_cartesian(xlim = c(3000, 5000))             \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](plotting_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\nNote that now the panel is cropped on the x-axis according to `coord_cartesian()`, but that our data has remained. This is for instance useful when we have some confidence intervals that become very broad but we do not want to show the range of the y-axis over the whole range of the confidence interval. For now, we will leave it out, but it's good to have it in our toolbox.\n\n#### `facet_grid()` and `facet_panel()`\n\n\n### Layer 6: theme\n\n### Common errors",
    "supporting": [
      "plotting_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
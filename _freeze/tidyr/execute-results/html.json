{
  "hash": "fc11a0799477b5263ba229bd452cd20d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Tidyr\"\n---\n\n\n## Tidyr\n`{tidyr}` is a package from the tidyverse that is meant to help you tidy up your data. What is considered 'tidy' data can be read in `vignette(\"tidy-data\")`. In short, tidy data helps you use `{dplyr}` and other tidyverse tools in a way that lets you spend less time on structuring your data and more on performing your analyses.\n\n## Reshaping data\nMost commonly, I use `{tidyr}` to reshape my data. Some analyses require data in long format (i.e. one study participant can have multiple observations which are represented by multiple rows) while data might be retrieved in wide format (i.e. one study participant can have multiple observations which are represented by multiple columns). In such a case, `{tidyr}` offers us `pivot_longer()`.\n\nWe can use `pivot_longer()` in a number of ways, but we must always supply the data in the argument `data`, and the columns to be pivoted in `cols`. In the simplest cases, this will suffice.\n\nAs an example, let's look at `billboard`, a dataset available through `{tidyr}`. `billboard` contains songs ranking the top 100 in the year 2000 with their position in each week after entering the top 100 (wk).\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# Load tidyr\npacman::p_load(\"tidyr\")\n\n# What does billboard look like?\nhead(billboard)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 79\n  artist      track date.entered   wk1   wk2   wk3   wk4   wk5   wk6   wk7   wk8\n  <chr>       <chr> <date>       <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1 2 Pac       Baby… 2000-02-26      87    82    72    77    87    94    99    NA\n2 2Ge+her     The … 2000-09-02      91    87    92    NA    NA    NA    NA    NA\n3 3 Doors Do… Kryp… 2000-04-08      81    70    68    67    66    57    54    53\n4 3 Doors Do… Loser 2000-10-21      76    76    72    69    67    65    55    59\n5 504 Boyz    Wobb… 2000-04-15      57    34    25    17    17    31    36    49\n6 98^0        Give… 2000-08-19      51    39    34    26    26    19     2     2\n# ℹ 68 more variables: wk9 <dbl>, wk10 <dbl>, wk11 <dbl>, wk12 <dbl>,\n#   wk13 <dbl>, wk14 <dbl>, wk15 <dbl>, wk16 <dbl>, wk17 <dbl>, wk18 <dbl>,\n#   wk19 <dbl>, wk20 <dbl>, wk21 <dbl>, wk22 <dbl>, wk23 <dbl>, wk24 <dbl>,\n#   wk25 <dbl>, wk26 <dbl>, wk27 <dbl>, wk28 <dbl>, wk29 <dbl>, wk30 <dbl>,\n#   wk31 <dbl>, wk32 <dbl>, wk33 <dbl>, wk34 <dbl>, wk35 <dbl>, wk36 <dbl>,\n#   wk37 <dbl>, wk38 <dbl>, wk39 <dbl>, wk40 <dbl>, wk41 <dbl>, wk42 <dbl>,\n#   wk43 <dbl>, wk44 <dbl>, wk45 <dbl>, wk46 <dbl>, wk47 <dbl>, wk48 <dbl>, …\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\n# Pivot billboard to long format\nbillboard_long <- pivot_longer(billboard, wk1:wk76)\n\n# Reprint billboard\nhead(billboard_long)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n  artist track                   date.entered name  value\n  <chr>  <chr>                   <date>       <chr> <dbl>\n1 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk1      87\n2 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk2      82\n3 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk3      72\n4 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk4      77\n5 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk5      87\n6 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk6      94\n```\n\n\n:::\n:::\n\n\nWe can see that the  data now has much less columns (5 as opposed to 79 previously). Instead, the number of rows has been increased: each row now corresponds to a week for each song. The weeks were put into a column called 'name' by default, and the values that were in the original week columns went into a column called 'value' by default.\n\nWe can of course change the names of those columns:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# Pivot billboard to long format\nbillboard_long <- pivot_longer(billboard, wk1:wk76, names_to = \"week\", values_to = \"position\")\n\n# Reprint billboard\nhead(billboard_long)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n  artist track                   date.entered week  position\n  <chr>  <chr>                   <date>       <chr>    <dbl>\n1 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk1         87\n2 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk2         82\n3 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk3         72\n4 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk4         77\n5 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk5         87\n6 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk6         94\n```\n\n\n:::\n:::\n\n\nCurrently, the week numbers are in the column called 'week', but are represented as a character string because the characters 'wk' are present in all columns. Although we will learn how to manipulate this in [Regex](regex.qmd), we can prevent this while calling the function:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# Pivot billboard to long format\nbillboard_long <- pivot_longer(billboard, wk1:wk76, names_to = \"week\", values_to = \"position\", names_prefix = \"wk\")\n\n# Reprint billboard\nhead(billboard_long)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n  artist track                   date.entered week  position\n  <chr>  <chr>                   <date>       <chr>    <dbl>\n1 2 Pac  Baby Don't Cry (Keep... 2000-02-26   1           87\n2 2 Pac  Baby Don't Cry (Keep... 2000-02-26   2           82\n3 2 Pac  Baby Don't Cry (Keep... 2000-02-26   3           72\n4 2 Pac  Baby Don't Cry (Keep... 2000-02-26   4           77\n5 2 Pac  Baby Don't Cry (Keep... 2000-02-26   5           87\n6 2 Pac  Baby Don't Cry (Keep... 2000-02-26   6           94\n```\n\n\n:::\n:::\n\n\nAlthough we have numbers now, they are still of class 'character'. However, we can specify the type they should be using `names_transform`:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# Pivot billboard to long format\nbillboard_long <- pivot_longer(billboard, wk1:wk76, names_to = \"week\", values_to = \"position\", names_prefix = \"wk\", names_transform = as.numeric)\n\n# Reprint billboard\nhead(billboard_long)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n  artist track                   date.entered  week position\n  <chr>  <chr>                   <date>       <dbl>    <dbl>\n1 2 Pac  Baby Don't Cry (Keep... 2000-02-26       1       87\n2 2 Pac  Baby Don't Cry (Keep... 2000-02-26       2       82\n3 2 Pac  Baby Don't Cry (Keep... 2000-02-26       3       72\n4 2 Pac  Baby Don't Cry (Keep... 2000-02-26       4       77\n5 2 Pac  Baby Don't Cry (Keep... 2000-02-26       5       87\n6 2 Pac  Baby Don't Cry (Keep... 2000-02-26       6       94\n```\n\n\n:::\n:::\n\n\nThis kind of control gives us much less head-ache when, for instance, we want to use the data for plotting (which we will see in [Plotting](plotting.qmd)):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\npacman::p_load(\"dplyr\",   # Data wrangling\n               \"ggplot2\"  # Data visualization\n)\n\n# Get only Britney Spears songs\ndat_plot <- filter(billboard_long, artist == \"Spears, Britney\" & !is.na(position))\n\n# Create plot\nggplot(dat_plot, aes(x = week, y = position, colour = track)) +\n    # Geometries\n    geom_line() +\n    # Scaling\n    scale_x_continuous(limits = c(0, 20)) +\n    scale_y_continuous(limits = c(0, 100)) +\n    # Aesthetics\n    theme_minimal() +\n    theme(panel.grid = element_blank(),\n          panel.background = element_rect(colour = \"black\", fill = \"white\"),\n          plot.background = element_rect(colour = \"transparent\", fill = \"transparent\"),\n          legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](tidyr_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::",
    "supporting": [
      "tidyr_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
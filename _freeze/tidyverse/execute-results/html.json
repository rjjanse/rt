{
  "hash": "40c0e0bc972f17bcc370ab928e5de560",
  "result": {
    "markdown": "---\ntitle: \"Tidyverse\"\n---\n\n\n## What is the tidyverse\nR is a great language for statistical programming, but can sometimes be strenuous to work with smoothly. The [tidyverse](https://www.tidyverse.org/) is a collection of packages that aims to make it easier to perform these strenuous operations. This ranges from data manipulation and visualization to working specifically with dates. The tidyverse allows these operations to be done in an easy-to-read and easy-to-write style, with all packages integrating with one another fluently (I swear, this is not an advertisement).\n\nThere are some packages that form the core of the tidyverse, that are all discussed in this tutorial:\n\n| Package   | Focususes on               | Discussed in               |\n|-----------|----------------------------|----------------------------|\n|`{tibble}` | Better data frames         | [Tidyverse](tidyverse.qmd) | \n|`{dplyr}`  | Data manipulation          | [Dplyr](dplyr.qmd)         |\n|`{tidyr}`  | Data tidying               | [Tidyr](tidyr.qmd)         |\n|`{readr}`  | Reading in data            | [Data](data.qmd)           |\n|`{purr}`   | Programming with functions | [Functions](functions.qmd) |\n|`{stringr}`| Working with strings       | [Regex](regex.qmd)         |\n|`{ggplot2}`| Data visualization         | [Plotting](plotting.qmd)   |\n|`{forcats}`| Working with factors       | [Plotting](plotting.qmd)   |\n\nBesides these packages, the tidyverse also contains other packages that support these packages or add other functionality.\n\n## Installing tidyverse\nTo install all packages of the tidyverse, we can simply run:\n\n```r\n# Install the tidyverse\ninstall.packages(\"tidyverse\")\n```\n\nor of course:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# Install tidyverse and load core tidyverse\npacman::p_load(\"tidyverse\")\n```\n:::\n\n\n```\n── Attaching core tidyverse packages ──── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package to force all conflicts to \nbecome errors\n``` \n\nHowever, note that loading `{tidyverse}` only loads the core packages as we see in the output. If we want to load packages from the tidyverse that are not part of the core set, we need to load those packages separately:\n\n```r\n# Load core tidyverse\nlibrary(tidyverse)\n\n# ALso load the magrittr package\nlibrary(magrittr)\n```\n\n## Shiver my ~~timbers~~ tibbles\nAlthough R normally works with data frames, the tidyverse works with tibbles. Tibbles are an enhanced type of data frame that try to do accomplish two things:\n\n- They try to do less\n\n- They complain more \n\nAs stated by the [documentation](https://tibble.tidyverse.org/), this is useful because it: \"...forces you to confront problems earlier, typically leading to cleaner, more expressive code\". \n\nTidyverse automatically creates tibbles, but you can also make tibbles yourself. Similar to `data.frame()` which we saw before, a tibble can be created with `tibble()`. Additionally, pre-existing data frames can be transformed to tibbles with `as_tibble()`. \n\nBesides better functionality, tibbles also print cleaner. Compare printing the first 15 rows of the data frame `iris` to printing all rows of the tibble `iris`:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# Print first 15 rows of data frame iris\niris[1:15, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1           5.1         3.5          1.4         0.2  setosa\n2           4.9         3.0          1.4         0.2  setosa\n3           4.7         3.2          1.3         0.2  setosa\n4           4.6         3.1          1.5         0.2  setosa\n5           5.0         3.6          1.4         0.2  setosa\n6           5.4         3.9          1.7         0.4  setosa\n7           4.6         3.4          1.4         0.3  setosa\n8           5.0         3.4          1.5         0.2  setosa\n9           4.4         2.9          1.4         0.2  setosa\n10          4.9         3.1          1.5         0.1  setosa\n11          5.4         3.7          1.5         0.2  setosa\n12          4.8         3.4          1.6         0.2  setosa\n13          4.8         3.0          1.4         0.1  setosa\n14          4.3         3.0          1.1         0.1  setosa\n15          5.8         4.0          1.2         0.2  setosa\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\n# Print all rows of iris when changed to tibble\nas_tibble(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 150 × 5\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n          <dbl>       <dbl>        <dbl>       <dbl> <fct>  \n 1          5.1         3.5          1.4         0.2 setosa \n 2          4.9         3            1.4         0.2 setosa \n 3          4.7         3.2          1.3         0.2 setosa \n 4          4.6         3.1          1.5         0.2 setosa \n 5          5           3.6          1.4         0.2 setosa \n 6          5.4         3.9          1.7         0.4 setosa \n 7          4.6         3.4          1.4         0.3 setosa \n 8          5           3.4          1.5         0.2 setosa \n 9          4.4         2.9          1.4         0.2 setosa \n10          4.9         3.1          1.5         0.1 setosa \n# ℹ 140 more rows\n```\n:::\n:::\n\n\n## Next topic\nNext, we will take a good look at an important core package of the tidyverse: dplyr.\n\n**Next:** [Dplyr](dplyr.qmd)\n\n",
    "supporting": [
      "tidyverse_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
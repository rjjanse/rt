[
  {
    "objectID": "accessing.html",
    "href": "accessing.html",
    "title": "Accessing and manipulating data",
    "section": "",
    "text": "Now that we have seen some basic R operations, such as functions and creating some data, let’s see some ways to access this data and play with it. For this we’ll mainly be working with dataframes and matrices. As an example, we will use the iris dataset, which is loaded into R by default. You can view the data just by running iris in your console:\n\niris\n\n    Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n1            5.1         3.5          1.4         0.2     setosa\n2            4.9         3.0          1.4         0.2     setosa\n3            4.7         3.2          1.3         0.2     setosa\n4            4.6         3.1          1.5         0.2     setosa\n5            5.0         3.6          1.4         0.2     setosa\n6            5.4         3.9          1.7         0.4     setosa\n7            4.6         3.4          1.4         0.3     setosa\n8            5.0         3.4          1.5         0.2     setosa\n9            4.4         2.9          1.4         0.2     setosa\n10           4.9         3.1          1.5         0.1     setosa\n11           5.4         3.7          1.5         0.2     setosa\n12           4.8         3.4          1.6         0.2     setosa\n13           4.8         3.0          1.4         0.1     setosa\n14           4.3         3.0          1.1         0.1     setosa\n15           5.8         4.0          1.2         0.2     setosa\n16           5.7         4.4          1.5         0.4     setosa\n17           5.4         3.9          1.3         0.4     setosa\n18           5.1         3.5          1.4         0.3     setosa\n19           5.7         3.8          1.7         0.3     setosa\n20           5.1         3.8          1.5         0.3     setosa\n21           5.4         3.4          1.7         0.2     setosa\n22           5.1         3.7          1.5         0.4     setosa\n23           4.6         3.6          1.0         0.2     setosa\n24           5.1         3.3          1.7         0.5     setosa\n25           4.8         3.4          1.9         0.2     setosa\n26           5.0         3.0          1.6         0.2     setosa\n27           5.0         3.4          1.6         0.4     setosa\n28           5.2         3.5          1.5         0.2     setosa\n29           5.2         3.4          1.4         0.2     setosa\n30           4.7         3.2          1.6         0.2     setosa\n31           4.8         3.1          1.6         0.2     setosa\n32           5.4         3.4          1.5         0.4     setosa\n33           5.2         4.1          1.5         0.1     setosa\n34           5.5         4.2          1.4         0.2     setosa\n35           4.9         3.1          1.5         0.2     setosa\n36           5.0         3.2          1.2         0.2     setosa\n37           5.5         3.5          1.3         0.2     setosa\n38           4.9         3.6          1.4         0.1     setosa\n39           4.4         3.0          1.3         0.2     setosa\n40           5.1         3.4          1.5         0.2     setosa\n41           5.0         3.5          1.3         0.3     setosa\n42           4.5         2.3          1.3         0.3     setosa\n43           4.4         3.2          1.3         0.2     setosa\n44           5.0         3.5          1.6         0.6     setosa\n45           5.1         3.8          1.9         0.4     setosa\n46           4.8         3.0          1.4         0.3     setosa\n47           5.1         3.8          1.6         0.2     setosa\n48           4.6         3.2          1.4         0.2     setosa\n49           5.3         3.7          1.5         0.2     setosa\n50           5.0         3.3          1.4         0.2     setosa\n51           7.0         3.2          4.7         1.4 versicolor\n52           6.4         3.2          4.5         1.5 versicolor\n53           6.9         3.1          4.9         1.5 versicolor\n54           5.5         2.3          4.0         1.3 versicolor\n55           6.5         2.8          4.6         1.5 versicolor\n56           5.7         2.8          4.5         1.3 versicolor\n57           6.3         3.3          4.7         1.6 versicolor\n58           4.9         2.4          3.3         1.0 versicolor\n59           6.6         2.9          4.6         1.3 versicolor\n60           5.2         2.7          3.9         1.4 versicolor\n61           5.0         2.0          3.5         1.0 versicolor\n62           5.9         3.0          4.2         1.5 versicolor\n63           6.0         2.2          4.0         1.0 versicolor\n64           6.1         2.9          4.7         1.4 versicolor\n65           5.6         2.9          3.6         1.3 versicolor\n66           6.7         3.1          4.4         1.4 versicolor\n67           5.6         3.0          4.5         1.5 versicolor\n68           5.8         2.7          4.1         1.0 versicolor\n69           6.2         2.2          4.5         1.5 versicolor\n70           5.6         2.5          3.9         1.1 versicolor\n71           5.9         3.2          4.8         1.8 versicolor\n72           6.1         2.8          4.0         1.3 versicolor\n73           6.3         2.5          4.9         1.5 versicolor\n74           6.1         2.8          4.7         1.2 versicolor\n75           6.4         2.9          4.3         1.3 versicolor\n76           6.6         3.0          4.4         1.4 versicolor\n77           6.8         2.8          4.8         1.4 versicolor\n78           6.7         3.0          5.0         1.7 versicolor\n79           6.0         2.9          4.5         1.5 versicolor\n80           5.7         2.6          3.5         1.0 versicolor\n81           5.5         2.4          3.8         1.1 versicolor\n82           5.5         2.4          3.7         1.0 versicolor\n83           5.8         2.7          3.9         1.2 versicolor\n84           6.0         2.7          5.1         1.6 versicolor\n85           5.4         3.0          4.5         1.5 versicolor\n86           6.0         3.4          4.5         1.6 versicolor\n87           6.7         3.1          4.7         1.5 versicolor\n88           6.3         2.3          4.4         1.3 versicolor\n89           5.6         3.0          4.1         1.3 versicolor\n90           5.5         2.5          4.0         1.3 versicolor\n91           5.5         2.6          4.4         1.2 versicolor\n92           6.1         3.0          4.6         1.4 versicolor\n93           5.8         2.6          4.0         1.2 versicolor\n94           5.0         2.3          3.3         1.0 versicolor\n95           5.6         2.7          4.2         1.3 versicolor\n96           5.7         3.0          4.2         1.2 versicolor\n97           5.7         2.9          4.2         1.3 versicolor\n98           6.2         2.9          4.3         1.3 versicolor\n99           5.1         2.5          3.0         1.1 versicolor\n100          5.7         2.8          4.1         1.3 versicolor\n101          6.3         3.3          6.0         2.5  virginica\n102          5.8         2.7          5.1         1.9  virginica\n103          7.1         3.0          5.9         2.1  virginica\n104          6.3         2.9          5.6         1.8  virginica\n105          6.5         3.0          5.8         2.2  virginica\n106          7.6         3.0          6.6         2.1  virginica\n107          4.9         2.5          4.5         1.7  virginica\n108          7.3         2.9          6.3         1.8  virginica\n109          6.7         2.5          5.8         1.8  virginica\n110          7.2         3.6          6.1         2.5  virginica\n111          6.5         3.2          5.1         2.0  virginica\n112          6.4         2.7          5.3         1.9  virginica\n113          6.8         3.0          5.5         2.1  virginica\n114          5.7         2.5          5.0         2.0  virginica\n115          5.8         2.8          5.1         2.4  virginica\n116          6.4         3.2          5.3         2.3  virginica\n117          6.5         3.0          5.5         1.8  virginica\n118          7.7         3.8          6.7         2.2  virginica\n119          7.7         2.6          6.9         2.3  virginica\n120          6.0         2.2          5.0         1.5  virginica\n121          6.9         3.2          5.7         2.3  virginica\n122          5.6         2.8          4.9         2.0  virginica\n123          7.7         2.8          6.7         2.0  virginica\n124          6.3         2.7          4.9         1.8  virginica\n125          6.7         3.3          5.7         2.1  virginica\n126          7.2         3.2          6.0         1.8  virginica\n127          6.2         2.8          4.8         1.8  virginica\n128          6.1         3.0          4.9         1.8  virginica\n129          6.4         2.8          5.6         2.1  virginica\n130          7.2         3.0          5.8         1.6  virginica\n131          7.4         2.8          6.1         1.9  virginica\n132          7.9         3.8          6.4         2.0  virginica\n133          6.4         2.8          5.6         2.2  virginica\n134          6.3         2.8          5.1         1.5  virginica\n135          6.1         2.6          5.6         1.4  virginica\n136          7.7         3.0          6.1         2.3  virginica\n137          6.3         3.4          5.6         2.4  virginica\n138          6.4         3.1          5.5         1.8  virginica\n139          6.0         3.0          4.8         1.8  virginica\n140          6.9         3.1          5.4         2.1  virginica\n141          6.7         3.1          5.6         2.4  virginica\n142          6.9         3.1          5.1         2.3  virginica\n143          5.8         2.7          5.1         1.9  virginica\n144          6.8         3.2          5.9         2.3  virginica\n145          6.7         3.3          5.7         2.5  virginica\n146          6.7         3.0          5.2         2.3  virginica\n147          6.3         2.5          5.0         1.9  virginica\n148          6.5         3.0          5.2         2.0  virginica\n149          6.2         3.4          5.4         2.3  virginica\n150          5.9         3.0          5.1         1.8  virginica\n\n\nAlthough this is fine for small datasets, and seems okay for the iris datset, data will easily be too large to properly display in the console. In that case, we can choose to see only the beginning or the end of the data, using the head() and tail() functions. With these functions, you can specify the number of rows in a certain dataset that you want to see. For example, to see the first 4 and the last 5 rows of the iris dataset, we can do the following:\n\nhead(iris, n = 4)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n\ntail(iris, n = 5)\n\n    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n146          6.7         3.0          5.2         2.3 virginica\n147          6.3         2.5          5.0         1.9 virginica\n148          6.5         3.0          5.2         2.0 virginica\n149          6.2         3.4          5.4         2.3 virginica\n150          5.9         3.0          5.1         1.8 virginica\n\n\n\n\n\n\n\n\nNote that because iris is loaded in by default, it does not appear in your global environment. To have it appear there, you can simply run:\niris &lt;- iris\n\n\n\nThis is already much clearer. Nonetheless, we might want to see the whole data, for example to quickly look for inconsistencies. You can do this just by clicking on the name of the data in your global environment, or by using the view() function:\nview(iris)\nWhen we use view() or open data from the global environment, RStudio offers as some quick tools to get a better overview of our data. After opening the data, you will see something similar to Figure 1, where you can see some areas of interest demarcated.\n\n\n\nFigure 1: Viewing data\n\n\nWe can now scroll through the data and see all columns. If you wonder how many rows and columns you have, you can see this at the bottom of the window. The viewer will only show 50 columns at a time, but you can click through the columns if you have more than 50. If you want to see only entries that meet a certain condition, you can press the filter button at the top of the viewer to filter certain values. Lastly, you can sort a column as ascending or descending by clicking on the little arrows to the right of the column name. Note that any operation you perform on the data in the viewer (sorting, filtering), does not affect the actual data, only the data you see. In other words, you only manipulate what you see in the data, not the data itself."
  },
  {
    "objectID": "accessing.html#accessing-data",
    "href": "accessing.html#accessing-data",
    "title": "Accessing and manipulating data",
    "section": "",
    "text": "Now that we have seen some basic R operations, such as functions and creating some data, let’s see some ways to access this data and play with it. For this we’ll mainly be working with dataframes and matrices. As an example, we will use the iris dataset, which is loaded into R by default. You can view the data just by running iris in your console:\n\niris\n\n    Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n1            5.1         3.5          1.4         0.2     setosa\n2            4.9         3.0          1.4         0.2     setosa\n3            4.7         3.2          1.3         0.2     setosa\n4            4.6         3.1          1.5         0.2     setosa\n5            5.0         3.6          1.4         0.2     setosa\n6            5.4         3.9          1.7         0.4     setosa\n7            4.6         3.4          1.4         0.3     setosa\n8            5.0         3.4          1.5         0.2     setosa\n9            4.4         2.9          1.4         0.2     setosa\n10           4.9         3.1          1.5         0.1     setosa\n11           5.4         3.7          1.5         0.2     setosa\n12           4.8         3.4          1.6         0.2     setosa\n13           4.8         3.0          1.4         0.1     setosa\n14           4.3         3.0          1.1         0.1     setosa\n15           5.8         4.0          1.2         0.2     setosa\n16           5.7         4.4          1.5         0.4     setosa\n17           5.4         3.9          1.3         0.4     setosa\n18           5.1         3.5          1.4         0.3     setosa\n19           5.7         3.8          1.7         0.3     setosa\n20           5.1         3.8          1.5         0.3     setosa\n21           5.4         3.4          1.7         0.2     setosa\n22           5.1         3.7          1.5         0.4     setosa\n23           4.6         3.6          1.0         0.2     setosa\n24           5.1         3.3          1.7         0.5     setosa\n25           4.8         3.4          1.9         0.2     setosa\n26           5.0         3.0          1.6         0.2     setosa\n27           5.0         3.4          1.6         0.4     setosa\n28           5.2         3.5          1.5         0.2     setosa\n29           5.2         3.4          1.4         0.2     setosa\n30           4.7         3.2          1.6         0.2     setosa\n31           4.8         3.1          1.6         0.2     setosa\n32           5.4         3.4          1.5         0.4     setosa\n33           5.2         4.1          1.5         0.1     setosa\n34           5.5         4.2          1.4         0.2     setosa\n35           4.9         3.1          1.5         0.2     setosa\n36           5.0         3.2          1.2         0.2     setosa\n37           5.5         3.5          1.3         0.2     setosa\n38           4.9         3.6          1.4         0.1     setosa\n39           4.4         3.0          1.3         0.2     setosa\n40           5.1         3.4          1.5         0.2     setosa\n41           5.0         3.5          1.3         0.3     setosa\n42           4.5         2.3          1.3         0.3     setosa\n43           4.4         3.2          1.3         0.2     setosa\n44           5.0         3.5          1.6         0.6     setosa\n45           5.1         3.8          1.9         0.4     setosa\n46           4.8         3.0          1.4         0.3     setosa\n47           5.1         3.8          1.6         0.2     setosa\n48           4.6         3.2          1.4         0.2     setosa\n49           5.3         3.7          1.5         0.2     setosa\n50           5.0         3.3          1.4         0.2     setosa\n51           7.0         3.2          4.7         1.4 versicolor\n52           6.4         3.2          4.5         1.5 versicolor\n53           6.9         3.1          4.9         1.5 versicolor\n54           5.5         2.3          4.0         1.3 versicolor\n55           6.5         2.8          4.6         1.5 versicolor\n56           5.7         2.8          4.5         1.3 versicolor\n57           6.3         3.3          4.7         1.6 versicolor\n58           4.9         2.4          3.3         1.0 versicolor\n59           6.6         2.9          4.6         1.3 versicolor\n60           5.2         2.7          3.9         1.4 versicolor\n61           5.0         2.0          3.5         1.0 versicolor\n62           5.9         3.0          4.2         1.5 versicolor\n63           6.0         2.2          4.0         1.0 versicolor\n64           6.1         2.9          4.7         1.4 versicolor\n65           5.6         2.9          3.6         1.3 versicolor\n66           6.7         3.1          4.4         1.4 versicolor\n67           5.6         3.0          4.5         1.5 versicolor\n68           5.8         2.7          4.1         1.0 versicolor\n69           6.2         2.2          4.5         1.5 versicolor\n70           5.6         2.5          3.9         1.1 versicolor\n71           5.9         3.2          4.8         1.8 versicolor\n72           6.1         2.8          4.0         1.3 versicolor\n73           6.3         2.5          4.9         1.5 versicolor\n74           6.1         2.8          4.7         1.2 versicolor\n75           6.4         2.9          4.3         1.3 versicolor\n76           6.6         3.0          4.4         1.4 versicolor\n77           6.8         2.8          4.8         1.4 versicolor\n78           6.7         3.0          5.0         1.7 versicolor\n79           6.0         2.9          4.5         1.5 versicolor\n80           5.7         2.6          3.5         1.0 versicolor\n81           5.5         2.4          3.8         1.1 versicolor\n82           5.5         2.4          3.7         1.0 versicolor\n83           5.8         2.7          3.9         1.2 versicolor\n84           6.0         2.7          5.1         1.6 versicolor\n85           5.4         3.0          4.5         1.5 versicolor\n86           6.0         3.4          4.5         1.6 versicolor\n87           6.7         3.1          4.7         1.5 versicolor\n88           6.3         2.3          4.4         1.3 versicolor\n89           5.6         3.0          4.1         1.3 versicolor\n90           5.5         2.5          4.0         1.3 versicolor\n91           5.5         2.6          4.4         1.2 versicolor\n92           6.1         3.0          4.6         1.4 versicolor\n93           5.8         2.6          4.0         1.2 versicolor\n94           5.0         2.3          3.3         1.0 versicolor\n95           5.6         2.7          4.2         1.3 versicolor\n96           5.7         3.0          4.2         1.2 versicolor\n97           5.7         2.9          4.2         1.3 versicolor\n98           6.2         2.9          4.3         1.3 versicolor\n99           5.1         2.5          3.0         1.1 versicolor\n100          5.7         2.8          4.1         1.3 versicolor\n101          6.3         3.3          6.0         2.5  virginica\n102          5.8         2.7          5.1         1.9  virginica\n103          7.1         3.0          5.9         2.1  virginica\n104          6.3         2.9          5.6         1.8  virginica\n105          6.5         3.0          5.8         2.2  virginica\n106          7.6         3.0          6.6         2.1  virginica\n107          4.9         2.5          4.5         1.7  virginica\n108          7.3         2.9          6.3         1.8  virginica\n109          6.7         2.5          5.8         1.8  virginica\n110          7.2         3.6          6.1         2.5  virginica\n111          6.5         3.2          5.1         2.0  virginica\n112          6.4         2.7          5.3         1.9  virginica\n113          6.8         3.0          5.5         2.1  virginica\n114          5.7         2.5          5.0         2.0  virginica\n115          5.8         2.8          5.1         2.4  virginica\n116          6.4         3.2          5.3         2.3  virginica\n117          6.5         3.0          5.5         1.8  virginica\n118          7.7         3.8          6.7         2.2  virginica\n119          7.7         2.6          6.9         2.3  virginica\n120          6.0         2.2          5.0         1.5  virginica\n121          6.9         3.2          5.7         2.3  virginica\n122          5.6         2.8          4.9         2.0  virginica\n123          7.7         2.8          6.7         2.0  virginica\n124          6.3         2.7          4.9         1.8  virginica\n125          6.7         3.3          5.7         2.1  virginica\n126          7.2         3.2          6.0         1.8  virginica\n127          6.2         2.8          4.8         1.8  virginica\n128          6.1         3.0          4.9         1.8  virginica\n129          6.4         2.8          5.6         2.1  virginica\n130          7.2         3.0          5.8         1.6  virginica\n131          7.4         2.8          6.1         1.9  virginica\n132          7.9         3.8          6.4         2.0  virginica\n133          6.4         2.8          5.6         2.2  virginica\n134          6.3         2.8          5.1         1.5  virginica\n135          6.1         2.6          5.6         1.4  virginica\n136          7.7         3.0          6.1         2.3  virginica\n137          6.3         3.4          5.6         2.4  virginica\n138          6.4         3.1          5.5         1.8  virginica\n139          6.0         3.0          4.8         1.8  virginica\n140          6.9         3.1          5.4         2.1  virginica\n141          6.7         3.1          5.6         2.4  virginica\n142          6.9         3.1          5.1         2.3  virginica\n143          5.8         2.7          5.1         1.9  virginica\n144          6.8         3.2          5.9         2.3  virginica\n145          6.7         3.3          5.7         2.5  virginica\n146          6.7         3.0          5.2         2.3  virginica\n147          6.3         2.5          5.0         1.9  virginica\n148          6.5         3.0          5.2         2.0  virginica\n149          6.2         3.4          5.4         2.3  virginica\n150          5.9         3.0          5.1         1.8  virginica\n\n\nAlthough this is fine for small datasets, and seems okay for the iris datset, data will easily be too large to properly display in the console. In that case, we can choose to see only the beginning or the end of the data, using the head() and tail() functions. With these functions, you can specify the number of rows in a certain dataset that you want to see. For example, to see the first 4 and the last 5 rows of the iris dataset, we can do the following:\n\nhead(iris, n = 4)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n\ntail(iris, n = 5)\n\n    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n146          6.7         3.0          5.2         2.3 virginica\n147          6.3         2.5          5.0         1.9 virginica\n148          6.5         3.0          5.2         2.0 virginica\n149          6.2         3.4          5.4         2.3 virginica\n150          5.9         3.0          5.1         1.8 virginica\n\n\n\n\n\n\n\n\nNote that because iris is loaded in by default, it does not appear in your global environment. To have it appear there, you can simply run:\niris &lt;- iris\n\n\n\nThis is already much clearer. Nonetheless, we might want to see the whole data, for example to quickly look for inconsistencies. You can do this just by clicking on the name of the data in your global environment, or by using the view() function:\nview(iris)\nWhen we use view() or open data from the global environment, RStudio offers as some quick tools to get a better overview of our data. After opening the data, you will see something similar to Figure 1, where you can see some areas of interest demarcated.\n\n\n\nFigure 1: Viewing data\n\n\nWe can now scroll through the data and see all columns. If you wonder how many rows and columns you have, you can see this at the bottom of the window. The viewer will only show 50 columns at a time, but you can click through the columns if you have more than 50. If you want to see only entries that meet a certain condition, you can press the filter button at the top of the viewer to filter certain values. Lastly, you can sort a column as ascending or descending by clicking on the little arrows to the right of the column name. Note that any operation you perform on the data in the viewer (sorting, filtering), does not affect the actual data, only the data you see. In other words, you only manipulate what you see in the data, not the data itself."
  },
  {
    "objectID": "creating.html",
    "href": "creating.html",
    "title": "Creating and storing data",
    "section": "",
    "text": "Let’s get started in R. Before we write any code, we should discuss the importance of annotation. When you are writing code it might seem clear to you what each line does, but if someone else reads your code or you look back at your code after a while, it might not seem so clear anymore. To allow others and your future-self to efficiently check, read, and re-use your code, it is important to extensively annotate your code. Let’s see some unannotated code (you don’t have to understand now what the code means):\niris %&gt;%\n    filter(Species == \"setosa\") %&gt;%\n    extract2(\"Sepal.Length\") %&gt;%\n    is_greater_than(5) %&gt;%\n    table() %&gt;%\n    prop.table() %&gt;%\n    extract2(TRUE) %&gt;%\n    `*`(100) %&gt;%\n    paste0(., \"%\")\nIn this section of code, there is a lot that happens (although some R users might still get the gist of the code). Moreover, a single section of code might quickly get much longer and more complicated than the above example. Luckily, the code can added to with annotation. In R, you can annotate with ‘#’. Any text written after the ‘#’ on the same line will not be run by R and can therefore be used to annotate code. So let’s see how we can increase this code’s clarity with annotation:\n# Calculate proportion of setosa observations with sepal length above 5\niris %&gt;%\n    # Keep only setosa species\n    filter(Species == \"setosa\") %&gt;%\n    # Keep only the sepal length values\n    extract2(\"Sepal.Length\") %&gt;%\n    # Determine whether each value is greater than 5 or not\n    is_greater_than(5) %&gt;%\n    # Count lengths above and below 5\n    table() %&gt;%\n    # Turn counts into proportions\n    prop.table() %&gt;%\n    # Keep only proportion for lengths above 5\n    extract2(TRUE) %&gt;%\n    # Multiply by 100\n    `*`(100) %&gt;%\n    # Add percentage sign\n    paste0(., \"%\")\nIt is true that annotation increases the length of a script, but it is important to note that the quality of a script is not affected by its length, but it is by its clarity.\n\n\n\n\n\n\nYou can use annotation for more than just explaining what your code does. You can add information on the general purpose of a script, its author, its creation date. You can add information on why you made a certain decision or add a URL to where you found the solution to a coding problem. It is easy to annotate too little, but difficult to annotate too much."
  },
  {
    "objectID": "creating.html#annotation",
    "href": "creating.html#annotation",
    "title": "Creating and storing data",
    "section": "",
    "text": "Let’s get started in R. Before we write any code, we should discuss the importance of annotation. When you are writing code it might seem clear to you what each line does, but if someone else reads your code or you look back at your code after a while, it might not seem so clear anymore. To allow others and your future-self to efficiently check, read, and re-use your code, it is important to extensively annotate your code. Let’s see some unannotated code (you don’t have to understand now what the code means):\niris %&gt;%\n    filter(Species == \"setosa\") %&gt;%\n    extract2(\"Sepal.Length\") %&gt;%\n    is_greater_than(5) %&gt;%\n    table() %&gt;%\n    prop.table() %&gt;%\n    extract2(TRUE) %&gt;%\n    `*`(100) %&gt;%\n    paste0(., \"%\")\nIn this section of code, there is a lot that happens (although some R users might still get the gist of the code). Moreover, a single section of code might quickly get much longer and more complicated than the above example. Luckily, the code can added to with annotation. In R, you can annotate with ‘#’. Any text written after the ‘#’ on the same line will not be run by R and can therefore be used to annotate code. So let’s see how we can increase this code’s clarity with annotation:\n# Calculate proportion of setosa observations with sepal length above 5\niris %&gt;%\n    # Keep only setosa species\n    filter(Species == \"setosa\") %&gt;%\n    # Keep only the sepal length values\n    extract2(\"Sepal.Length\") %&gt;%\n    # Determine whether each value is greater than 5 or not\n    is_greater_than(5) %&gt;%\n    # Count lengths above and below 5\n    table() %&gt;%\n    # Turn counts into proportions\n    prop.table() %&gt;%\n    # Keep only proportion for lengths above 5\n    extract2(TRUE) %&gt;%\n    # Multiply by 100\n    `*`(100) %&gt;%\n    # Add percentage sign\n    paste0(., \"%\")\nIt is true that annotation increases the length of a script, but it is important to note that the quality of a script is not affected by its length, but it is by its clarity.\n\n\n\n\n\n\nYou can use annotation for more than just explaining what your code does. You can add information on the general purpose of a script, its author, its creation date. You can add information on why you made a certain decision or add a URL to where you found the solution to a coding problem. It is easy to annotate too little, but difficult to annotate too much."
  },
  {
    "objectID": "creating.html#basic-mathematic-operators-and-running-code",
    "href": "creating.html#basic-mathematic-operators-and-running-code",
    "title": "Creating and storing data",
    "section": "Basic mathematic operators and running code",
    "text": "Basic mathematic operators and running code\nNow let’s (finally) see some real code! Let’s start with some basic operators:\n1 + 1   # Addition\n3 - 1   # Substraction\n2 * 3   # Multiplication\n8 / 2   # Division\n8 %% 2  # Modulo\nR follows the conventional order of mathematic operation.\nHowever, these operators are useless if we do not actually run the code. To run a section of code, put your cursor in the code section (can be anywhere) and press ctrl + enter to run the code. If you want to run a specific part of the code, instead of a whole section, you can select the part you want to run and then use ctrl + enter again, to run only the selected part.\nThe results of the selected code can be found in the console. If the code takes some time to run, you can see it is done when a new line of the console starts with &gt; (Figure 1 (a)).\n\n\n\n\n\n\nIf you select a specific part of code to run, make sure to be inclusive! For instance, if you forget to select an enclosing paranthesis, the selected code will be put in the console, but it will not be run. You can see that this happened if a new line in the console starts with + (Figure 1 (b)). To cancel a waiting command, you can press esc.\n\n\n\nIf we run the example code for the basic mathematic operators, we will get the following results:\n\n1 + 1   # Addition\n\n[1] 2\n\n3 - 1   # Substraction\n\n[1] 2\n\n2 * 3   # Multiplication\n\n[1] 6\n\n8 / 2   # Division\n\n[1] 4\n\n8 %% 2  # Modulo\n\n[1] 0\n\n\nBefore each result, you can see [1]. This indicates that that specific line of code starts with the nth result. When a single code starts printing multiple results, this can help identify what n a certain result is.\n\n\n\n\n\n\n\n(a) Ready\n\n\n\n\n\n\n\n(b) Waiting for input to finish\n\n\n\n\nFigure 1: Console states"
  },
  {
    "objectID": "creating.html#functions",
    "href": "creating.html#functions",
    "title": "Creating and storing data",
    "section": "Functions",
    "text": "Functions\nNow that we know the basic mathematic operators, we could calculate the standard deviation. For example, for the numbers 3, 8, 3, 7 and 1, we could do the following:\n\n# Calculate the mean\n(3 + 8 + 3 + 7 + 1) / 5\n\n[1] 4.4\n\n\n\n# Use the calculated mean to calculate the standard deviation\n(((3 - 4.4) ^ 2 + (8 - 4.4) ^ 2 + (3 - 4.4) ^ 2 + (7 - 4.4) ^ 2 + (1 - 4.4) ^ 2) / (5 - 1)) ^ 0.5\n\n[1] 2.966479\n\n\n\n\nA sample’s standard deviation \\(s\\) is obtained by calculating:\n\\[\\sqrt\\frac{\\sum{(x-\\overline{x})^2}}{n-1}\\]\nHowever, with only 5 numbers, this is already a lot of effort. This is where functions come in: R has many built-in keywords that allow you to quickly perform operations and/or calculations on the data, which we call functions. A function has a generic name and is followed by opening and closing brackets. Between the brackets, we can supply so-called arguments (i.e., data and/or specifications). For example, if we wanted to calculate the standard deviation, instead of typing out all the numbers, we could just type the following:\n\n# Calculate standard deviation\nsd(c(3, 8, 3, 7, 1))\n\n[1] 2.966479\n\n\n\n\n\n\n\n\nIn the standard deviation function, we use the c() function. Later we will elaborate on this, but for now it is enough to remember that c() creates a collection of data, which is more often called an object.\nBe aware that R is case-sensitive: c() as a function differs from C().\n\n\n\nLet’s see some standard functions that will be of great help to you.\n\nSum\nsum(), as it name suggests, sums the supplied values. It has the following arguments:\n\n...: the ellipsis indicates that any number of values can be supplied here. The sum function can take numeric values, integers, and booleans/logicals (i.e., it can sum the amount of TRUEs).\nna.rm = FALSE: na.rm indicates whether any missing values should be dropped. By default, this is FALSE, meaning that the function will return NA if there is any NAs present in the data you are trying to sum. If you want to sum all valid values (thus drop all NAs), you can specify na.rm = TRUE.\n\nSee the below examples:\n\nsum(3, 4, 5, 6)\n\n[1] 18\n\nsum(3, NA, 5, 6)\n\n[1] NA\n\nsum(3, NA, 5, 6, na.rm = TRUE)\n\n[1] 14\n\n\n\n\n\n\n\n\nIn the sum() function, na.rm has the default value FALSE. This means that this argument does not have to be defined. If we would not define it, it would just use FALSE.\n\n\n\n\n\nMean and median\nTo get the mean or median from some data, you can use the mean() and median() functions. mean() has the following arguments:\n\nx: a collection (or object) of data containing the data for which a mean should be calculated.\ntrim = 0: what proportion of the outskirts of the data should be trimmed (e.g., 0.05 trims 5% of data on each side). It defaults to 0.\nna.rm = FALSE: whether NAs should be dropped (as in sum())\n\nmedian() has the same arguments, except that it doesn’t have trim.\nHere are some examples:\n\nmean(c(3, 4, 8, 3, 0, 4, 7, 8, 3, 1, 1044))\n\n[1] 98.63636\n\nmean(c(3, 4, 8, 3, 0, 4, 7, 8, 3, 1, 1044), trim = 0.1)\n\n[1] 4.555556\n\nmedian(c(3, 4, 8, 3, 0, 4, 7, 8, 3, 1, 1044))\n\n[1] 4\n\n\n\n\n\n\n\n\nNotice how with the mean, we specified that 0.1 was the value for trim, but we did not specify that c(3, 4, 8, 3, 0, 4, 7, 8, 3, 1, 1044) was the value for x. This is because R inputs values for arguments in order: the first supplied value will be used for the first argument, the second supplied value will be used for the second argument, etc. However, sometimes I do not want to specify the second value, but I do want to specify the third value. In this case I can name the argument as in trim = 0.1, so that R knows the 0.1 is meant for trim.\n\n\n\n\n\nMin and max\nNow that we know how to calculate the mean and median from some data, we might also be interest in finding the lowest and highest value (for example, to detect the 1044 outlier). We can do this with min() and max(), which both take only one argument: ... as in the sum() function.\nTo get the minimum and maximum value from the data we just calculated the mean and median of, we could do the following:\n\nmin(3, 4, 8, 3, 0, 4, 7, 8, 3, 1, 1044)\n\n[1] 0\n\nmax(3, 4, 8, 3, 0, 4, 7, 8, 3, 1, 1044)\n\n[1] 1044\n\n\n\n\nSummary and quintile\nNow we know how to calculate the mean, median, minimum, and maximum values from some data, but what if we also want to know the 1st and 3rd quartile? Additionally, we do not want to use a function for each separate value. In this case, you can use summary(), which calculates the minimum, 1st quartile, mean, median, 3rd quartile, and maximum all at once. The summary function has multiple arguments, but only one is relevant for now:\n\nobject: the data of which you want to get a summary.\n\nFor example:\n\nsummary(c(3, 4, 8, 3, 0, 4, 7, 8, 3, 1, 1044))\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    3.00    4.00   98.64    7.50 1044.00 \n\n\nHowever, maybe we are more interested in the 1st and 99th quantiles. In that case we could use quantile(). You can supply the following arguments to quantile():\n\nx: a collection of data (or object) of which you want to calculate quantiles.\nprobs = seq(0, 1, 0.25): the probabilities (or quantiles) you want to calculate. It defaults to seq(0, 1, 0.25), which just means a sequence from 0 to 1 with increments of 0.25.\nna.rm = FALSE: whether NAs should be dropped.\nnames = TRUE: whether the output should show the name (or specified quantile).\n\nSo we could do:\n\nquantile(c(3, 4, 8, 3, 0, 4, 7, 8, 3, 1, 1044), \n         probs = c(0.01, 0.99))\n\n   1%   99% \n  0.1 940.4 \n\nquantile(c(3, 4, 8, 3, 0, 4, 7, 8, 3, 1, 1044), \n         probs = c(0.01, 0.99), names = FALSE)\n\n[1]   0.1 940.4\n\n\n\n\nTable\nWe have now seen some functions that we can use to get some descriptives about continuous data. However, sometimes we just want to count the amount of different observations. For this we can use table(). Some of the relevant arguments for the table function are the following:\n\n...: the variables to be supplied to table, as we saw in earlier functions.\nuseNA = c(\"no\", \"ifany\", \"always\"): should NAs be tabulated (conditional on if any are present) or not. The c(\"no\", \"ifany\", \"always\"), means that useNA takes any of the three following values: \"no\", \"ifany\", or \"always\".\n\nFor example:\n\ntable(c(TRUE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, FALSE, NA))\n\n\nFALSE  TRUE \n    3     5 \n\ntable(c(TRUE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, FALSE, NA), \n      useNA = \"ifany\")\n\n\nFALSE  TRUE  &lt;NA&gt; \n    3     5     1 \n\ntable(c(TRUE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, FALSE), \n      useNA = \"always\")\n\n\nFALSE  TRUE  &lt;NA&gt; \n    3     5     0 \n\n\nYou can also use table() to create a cross-table:\n\ntable(c(FALSE, TRUE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, FALSE), \n      c(TRUE, TRUE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE))\n\n       \n        FALSE TRUE\n  FALSE     3    1\n  TRUE      3    2\n\n\nFor the cross-tabulation, values are compered based on their order in the data you supply (e.g., the first value, FALSE in the first set is compared to the first value, TRUE, in the second set.)\n\n\n\n\n\n\nWe now went through some arguments for commonly used functions together, but it is good that you know what arguments a function takes and where you can find this. If you want to know more about any function, for example for sum(), you can open the documentation by running ?sum. In the help panel on the lower right in RStudio, you will find the documentation with the function, its default values, elaboration on the arguments it takes, details, and examples. You can also click on a function and press F1 to open the help panel."
  },
  {
    "objectID": "creating.html#storing-values",
    "href": "creating.html#storing-values",
    "title": "Creating and storing data",
    "section": "Storing values",
    "text": "Storing values\nWe have now seen how we can calculate some values using basic mathematic operators and functions. However, just typing out our data can become quite tiresome, so preferably I would store them in a variable. In R, things that store data are often called subjects. Let’s look at some different ways we can store data.\n\nSingle value\nWe can assign a single value by using the &lt;- operator (which has the easy keyboard shortcut alt + - in RStudio). To then see the object, we can simply run it. For example:\n\nx &lt;- sum(4, 9)\nx\n\n[1] 13\n\nx &lt;- 4 + 5\nx\n\n[1] 9\n\n\n\n\n\n\n\n\nNote that we defined the object x twice. When defining an object that already exists, the old object is overridden.\n\n\n\n\n\n\n\n\n\nTo assign a value to an object, you can also use = instead of &lt;-. However, this is often unclear and may be confused with defining arguments in functions. It is therefore strongly recommended to only assign objects using &lt;-.\n\n\n\n\n\nVectors\nWhen we want to assign multiple values to a single variable, we can create a vector. There are two simple ways to create a vector. First, we can use the c function (c()), that we saw before when discussing functions. c() creates a simple collection of any type of value. We call this collection a vector.\n\nx &lt;- c(4, 6, 9, 3, 2)\nx\n\n[1] 4 6 9 3 2\n\n# Using a vector in the sum function\nsum(x)\n\n[1] 24\n\n\nYou can also create a vector of sequential integers by using ::\n\nx &lt;- 5:17\nx\n\n [1]  5  6  7  8  9 10 11 12 13 14 15 16 17\n\n\nAdditionally, you can create any sequence using the seq() function which takes the arguments from, to, and by, meaning respectively the start, finish, and increments of the sequence.\n\nx &lt;- seq(5, 7, 0.5)\nx\n\n[1] 5.0 5.5 6.0 6.5 7.0\n\n\nWe could also multiply two vectors with each other (given they have the same length) or a vector with a single value:\n\nx &lt;- 1:5\ny &lt;- 5:1\n\nx * y\n\n[1] 5 8 9 8 5\n\nx * 2\n\n[1]  2  4  6  8 10\n\n\nLastly, you could create a named vector (i.e., each value has a name):\n\nx &lt;- c(\"Obs1\" = 42, \"Obs2\" = 28, \"Obs3\" = 91)\nx\n\nObs1 Obs2 Obs3 \n  42   28   91 \n\n\n\n\nLists\nA list is also a collection of data, but it can store much more than just values, such as vectors, and whole data sets:\n\nx &lt;- list(head(iris, 3), head(mtcars, 3))\nx\n\n[[1]]\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n\n[[2]]\n               mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4     21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710    22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n\n\nHowever, you cannot immediately apply mathematic operators on a list or use a list in data. If we have a list with data (for example different objects), we first have to unlist:\n\nx &lt;- list(4, 2)\nunlist(x) * 2\n\n[1] 8 4\n\n\nWhen you create a model, they are always stored in lists too, with many information alongside the results. We will come across this later in the tutorial.\n\n\nMatrices\nIf we want data with more than one dimension (i.e., columns and rows), we could create a matrix with the matrix function:\n\nx &lt;- matrix(c(31, 3, 18, 7, 84, 20), nrow = 3, ncol = 2)\nx\n\n     [,1] [,2]\n[1,]   31    7\n[2,]    3   84\n[3,]   18   20\n\n\nWe can also supply a single value that fills the entire matrix:\n\nx &lt;- matrix(\"Hello, World!\", nrow = 5, ncol = 3)\nx\n\n     [,1]            [,2]            [,3]           \n[1,] \"Hello, World!\" \"Hello, World!\" \"Hello, World!\"\n[2,] \"Hello, World!\" \"Hello, World!\" \"Hello, World!\"\n[3,] \"Hello, World!\" \"Hello, World!\" \"Hello, World!\"\n[4,] \"Hello, World!\" \"Hello, World!\" \"Hello, World!\"\n[5,] \"Hello, World!\" \"Hello, World!\" \"Hello, World!\"\n\n\nMatrices are useful because they have multiple dimensions, which allows us to store different variables of the same person in multiple columns along the same row.\n\n\nData frames\nMatrices give us a flexible way to store data with rows and columns, but miss some flexibility when it comes to manipulating the data and performing calculations, loading it into functions, etc. In this case, data frames offer a good solution. Data frames look exactly matrices, but are much easier to manipulate and use for analyses. Data frames are likely what will compose most of the data you use in R.\nWe can create a data frame with the data.frame() function:\n\nx &lt;- data.frame(id = 1:5,\n                value1 = c(5, 2, 0, 2, 4),\n                value2 = c(9.4, 8.3, 2.8, 5.6, 2.7))\nx\n\n  id value1 value2\n1  1      5    9.4\n2  2      2    8.3\n3  3      0    2.8\n4  4      2    5.6\n5  5      4    2.7\n\n\nWhen working with data frames, there are some useful functions you can use:\n\nTo determine how many rows and columns a data frame (or matrix) has, you can use nrow() and ncol().\nTo change the row and column names, you can use rownames() and colnames(). To see how these functions work, you can access the examples in their documentation with ?rownames and ?colnames.\nTo change a data frame to a matrix or a matrix to a data frame, you can use as.matrix() and as.data.frame()."
  },
  {
    "objectID": "creating.html#the-global-environment",
    "href": "creating.html#the-global-environment",
    "title": "Creating and storing data",
    "section": "The global environment",
    "text": "The global environment\nWe have seen some ways to create and store data now. However, where can we find back what we have created? This is where the global environment comes in. Whenever you create an object in your code, that object will be stored in the global environment, which is just a general storage space. A great benefit that RStudio gives us is being able to see the global environment and whatever is stored in there, and to get a quick indication of what kind of data is stored.\nBefore we see the global environment, let’s first clean it with the following code:\nrm(list = ls())\nWith the rm() function, we can remove objects from our global environment, and here we specify that the list of variables to be removed (list =), is the whole global environment (ls()). It is useful to remove objects you do not need to keep your global environment clean. Not only does it help in available working memory, it is also good to work in an organized (global) environment.\nNow let’s create some new data to showcase the global environment in RStudio:\n# Load pre-existing data frame\ndata &lt;- iris\n\n# Create vector\nvector &lt;- 1:13\n\n# Create single value\nval &lt;- 42\n\n# Create vector of strings\nstrings &lt;- c(\"Hello\", \"I\", \"am\", \"a\", \"vector\")\nNow let’s look at our global environment. If you remember, the upper right window of the RStudio interface shows the global environment. With the data we just created, it will look like Figure 2 (a) (the colours might differ depending on your theme).\nFrom the global environment, we can learn a few things:\n\nThe current memory usage is 121 MiB, in the upper middle of the image.\nWe have one structured data object, data. This data object has 150 observations (rows) of 5 variables (columns).\nstrings is a character (chr) with 5 values ([1:5). We then see the first values.\nval is a single value, 42.\nvector is an integener (int) with 13 values ([1:13]`) and we can see the first values.\n\nThis already gives us quite some information, but we can also get some more information on the structured data. If you press the small blue button with an arrow, next to data, you will see that it opens, as in Figure 2 (b). This let’s us learn the following information about data:\n\nWe can see each of the columns of data. The first four are numerical (num).\nThe fifth column, Species, is a factor (i.e., categorical) with three levels (of which the first one is “setosa”).\n\n\n\n\n\n\n\n\n(a) Global environment\n\n\n\n\n\n\n\n(b) Global environment with opened data\n\n\n\n\nFigure 2: The global environment"
  },
  {
    "objectID": "creating.html#dealing-with-warnings-and-errors",
    "href": "creating.html#dealing-with-warnings-and-errors",
    "title": "Creating and storing data",
    "section": "Dealing with warnings and errors",
    "text": "Dealing with warnings and errors\nWe have now gone through the basics of creating and storing data. However, sometimes, we supply a wrong value to a function or mess up a parenthesis somewhere. This can give either warnings or errors. In both cases, it is important to realize what is happening. Warnings are messages printed in the console that try to tell us that something might be wrong in the data or not suited, or that the data was manipulated in the function to make sure the function could work. For example, if I try to change a character string to numeric with as.numeric(), I will get the warning: Warning message: NAs introduced by coercion, but the function still completed.\nSometimes, warnings are expected or not a problem. In that case, you can put the whole code inside the function supressWarnings(), to silence the warning. It is however always of paramount importance that you annotate what the warning was and why it can be suppressed.\nSometimes, you might get an error instead of a warning. This means that the function could not continue to run and you have to fix the error before being able to run the function.\nNot all errors are as clear and you can not always figure out by yourself what is going wrong. Luckily, we have the internet! You can easily google the error and add ‘R’ at the end to find other people who encountered the same or similar problems and find solutions. If you can find nothing, you could always ask on coding forums, such as stackoverflow. When you ask a solution to a coding question, always supply your question with a reproducible example, so that a responder can run the code themselves and see where it goes wrong."
  },
  {
    "objectID": "creating.html#exercises",
    "href": "creating.html#exercises",
    "title": "Creating and storing data",
    "section": "Exercises",
    "text": "Exercises\n\n1. Create and store numbers\nCreate a vector of the integers 5, 6, 7, 8, 9, and 10 and store it in an object called vec.\n\n\nAnswer\n# Answer 1: using c()\nvec &lt;- c(5, 6, 7, 8, 9, 10)\n\n# Answer 2: using the `:` operator\nvec &lt;- 5:10\n\n# Answer 3: using seq()\nvev &lt;- seq(5, 10, 1)\n\n\n\n\n2. Calculate quantiles\nCalculate the 2.5th and 97.5th percentile of the object vec.\n\n\nAnswer\nquantile(vec, probs = c(0.025, 0.975))\n\n\n 2.5% 97.5% \n5.125 9.875 \n\n\n\n\n3. Create a matrix\nUsing the data in vec, create a matrix with two columns and three rows.\n\n\nAnswer\nmatrix(vec, nrow = 3, ncol = 2)\n\n\n     [,1] [,2]\n[1,]    5    8\n[2,]    6    9\n[3,]    7   10\n\n\n\n\n4. Getting help\nOpen the documentation for rm().\n\n\nAnswer\n?rm\n\n\n\n\n5. Cleaning up\nNow use rm() to remove vec again.\n\n\nAnswer\nrm(vec)"
  },
  {
    "objectID": "creating.html#next-topic",
    "href": "creating.html#next-topic",
    "title": "Creating and storing data",
    "section": "Next topic",
    "text": "Next topic\nNow that we went through the basics of creating and storing data, we can start talking about accessing and manipulating data.\nNext: Accessing and manipulating data"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction",
    "section": "",
    "text": "Hi and welcome to this R tutorial! This tutorial aims to teach you the basics of R (and RStudio) and some useful applications in using R for epidemiologic data analysis (which has many overlaps with data science), such as how to perform regression analyses and plot results.\nThroughout the tutorial, there will be example code. Feel free to also write and run this on your own device and play around with changing things up to see what happens.\nAdditionally, there will be exercises you can make to keep track of your learning progress. Answers to the exercises are available under the ‘Answer’ button. An example is shown below.\n\nExercises\n0: Open the answer\n\n\nAnswer\n# Well done!\n\n\nNext: R"
  },
  {
    "objectID": "r.html",
    "href": "r.html",
    "title": "R",
    "section": "",
    "text": "R is a programming language with a specific focus on statistical programming. A large part of the original R programming language took inspiration from the S programming language. This is also where it also got its name (R being next to S in the alphabet), together with R being the first name of the developers (Ross Ihaka and Robet Gentleman). R first appeared in August 1993 and the first official R version 1.0 was released on the 29th of February, 2000 (Source)."
  },
  {
    "objectID": "r.html#r-an-introduction",
    "href": "r.html#r-an-introduction",
    "title": "R",
    "section": "",
    "text": "R is a programming language with a specific focus on statistical programming. A large part of the original R programming language took inspiration from the S programming language. This is also where it also got its name (R being next to S in the alphabet), together with R being the first name of the developers (Ross Ihaka and Robet Gentleman). R first appeared in August 1993 and the first official R version 1.0 was released on the 29th of February, 2000 (Source)."
  },
  {
    "objectID": "r.html#installing-r",
    "href": "r.html#installing-r",
    "title": "R",
    "section": "Installing R",
    "text": "Installing R\nLet’s start by installing R. R can be used on Windows, Apple, and Linux operating systems. To download R, you can go to https://cran.rstudio.com, where you can choose the download link applicable to your platform.\nAfter R is installed, you can open it and you will see the following screen:\n\n\n\nFigure 1: R graphical user interface\n\n\nIn Figure 1, you can see the R console, which allows you write code to subsequently yield results. However, as you might have noticed, the interface is quite limited in the information it shows you. This is why it is a good idea to install an Integrated Development Environment (also called an IDE).\nNext: Installing the RStudio IDE"
  },
  {
    "objectID": "rstudio.html",
    "href": "rstudio.html",
    "title": "RStudio",
    "section": "",
    "text": "One of the most popular IDEs for R is RStudio, developed by Posit. RStudio is an especially great IDE for R because it was developed specifically with R in mind. Although other IDEs exist, these are often more general, meaning there is functionality that is not relevant to R, or that there are implementations missing that could greatly benefit R users. Additionally, if you are ever interested in working with Python, RStudio also supports Python, as well as integration of Python and R into the same document.\nRStudio can be downloaded from https://posit.co/download/rstudio-desktop/. You have already downloaded R in the previous section so you can immediately go to step two and download RStudio desktop."
  },
  {
    "objectID": "rstudio.html#installing-the-rstudio-ide",
    "href": "rstudio.html#installing-the-rstudio-ide",
    "title": "RStudio",
    "section": "",
    "text": "One of the most popular IDEs for R is RStudio, developed by Posit. RStudio is an especially great IDE for R because it was developed specifically with R in mind. Although other IDEs exist, these are often more general, meaning there is functionality that is not relevant to R, or that there are implementations missing that could greatly benefit R users. Additionally, if you are ever interested in working with Python, RStudio also supports Python, as well as integration of Python and R into the same document.\nRStudio can be downloaded from https://posit.co/download/rstudio-desktop/. You have already downloaded R in the previous section so you can immediately go to step two and download RStudio desktop."
  },
  {
    "objectID": "rstudio.html#finding-your-way-around-rstudio",
    "href": "rstudio.html#finding-your-way-around-rstudio",
    "title": "RStudio",
    "section": "Finding your way around RStudio",
    "text": "Finding your way around RStudio\nNow let’s see what RStudio offers us compared to the graphical user interface of R itself. When we open RStudio, Figure 1 shows what we see:\n\n\n\nFigure 1: Default RStudio\n\n\n\nInterface\nFirst, let’s see what each section in the RStudio window, as numbered in Figure 2, means.\n\nThe first section is the script. In the script is where you will write most of your code. Scripts are text files that are saved on your device and you can load in later, meaning any code you write you can reuse later, without writing it again.\nThe second section is the console. Any code you run in the script will show its output in the console. Additionally, if you quickly want to see the output of some code, you can write it in the console instead of the script (but it won’t be saved then).\nThe third section is the global environment. Any data you create wil show up in here and from here you can inspect the data and details related to the data.\nThe fourth section contains multiple tabs, of which many are relevant to any R user.\n\nThe first tab is the ‘Files’ tab. When you are working on some code in R, it is possible to determine from where files are loaded and where files are saved by default. This location is automatically opened in the ‘Files’ tab, from where you can inspect the location and load any files by hand.\nThe second tab is the ‘Plots’ tab. Whenever you create a plot (i.e., figure) in R, it will show up in this tab, so that you can visually inspect whether you like it before exporting it.\nIn the third tab, ‘Packages’, you can find all Packages (more on those later) you have installed and see which ones are loaded. Additionally, you can update packages from this tab.\nThe ‘Help’ tab, the fourth of the tabs available, allows you to search for functions and packages and helps you understand how they work and how to enter data into them to obtain the desires results.\nThe last tab of interest for now, the ‘Viewer’ tab, allows you to view created documents. Sometimes, R allows you to documents, such as HTML documents (of which we will see an example later on), which can then be visually inspected in the viewer before export.\n\n\n\n\n\nFigure 2: RStudio interface\n\n\nThese are all the important sections and tabs any RStudio user should know about. Don’t worry if you don’t immediately understand or remember what the windows do or represent. Throughout the tutorial, they will come back and through practice you will get a good understanding of what you see in your RStudio window.\n\n\nSettings\nSecond, let’s highlight some good settings that can ease your programming in R. The settings I will highlight here are my personal preference and in no way something you must adhere to, but it is good to know that they exist and that get an idea of the extent to which you can personalize the way RStudio works for you.\nTo open the settings, you can go to ‘Tools’ in the menu bar at the top of the screen, and select ‘Global options’ in the drop-down menu, shown in Figure 3.\n\n\n\nFigure 3: Going to global options\n\n\n\nSaving the workspace\nA first setting I want to highlight is saving the workspace. By default, when you exit RStudio, RStudio will ask you whether you want to save the workspace. The saved workspace will then be restored upon re-opening R. In other words, any data you created and loaded in would be saved upon quitting RStudio and loaded back in when you start RStudio again. Although this may sound useful, it also means that all data you create needs to be removed manually. This can quickly cause problems with memory and the speed of R and your device. Therefore I suggest that under ‘General’ you remove the tick from ‘Restore .RData into workspace at startup’ and set Save workspace to .RData on exit to Never as seen in Figure 4.\n\n\n\nFigure 4: Workspace settings\n\n\n\n\nCode display\nTo make our code a bit more readable, I suggest changing a few settings under the section ‘Code’ in the tab ‘Display’ as seen in Figure 5. I prefer changing the following settings regarding my code display:\n\nMargin: by default, the scripts in R show a margin (a vertical line) on the right of a code. This can help you style your code width if you use RStudio on different devices with different screen widths. Personally, I like to turn the margin off by removing the tick from ‘Show margin’.\nScrolling past end: when you write a code in a script, you can scroll to the end of the script, but not further, However, personally I prefer to have the code that I am looking at be in the middle of the screen. By ticking ‘Allow scroll past end of document’, I can keep scrolling after the code finishes to center the code in the window.\nHighlight functions: in R, we can calculate many things using functions (more on this later). However, these normally are the same colour as the rest of your code. I prefer to highlight functions to increase readability. You can do this by ticking ‘Highlight R function calls’.\nRainbow parentheses: many of the code that is written in R uses parentheses: (). However, many parentheses within each other might become very confusing: (((()))). Although R highlights the corresponding parenthesis, I find it helpful to additionally colour corresponding parentheses the same colour, while non-corresponding parentheses are coloured different. You can do this by ticking ‘Rainbow parentheses’.\n\n\n\n\nFigure 5: Code display settings\n\n\n\n\nRStudio appearance\nWhen working in RStudio, I prefer the screen to not be too bright. Additionally, I modified the way the code looks to my own preferences. You can try what works best for you under ‘Appearance’ (Figure 6).\n\n\n\nFigure 6: RStudio appearance settings\n\n\nNext: Creating and storing data"
  },
  {
    "objectID": "accessing.html#value-types",
    "href": "accessing.html#value-types",
    "title": "Accessing and manipulating data",
    "section": "Value types",
    "text": "Value types\nThe last thing to discuss for now are value types. A few times we talked about strings, which is a specific type a value can have in R. The most important value types to know for now are:\n\nnumeric: a real number, for example 1.42, 8.42, and -5.0.\ninteger: an integer, for exapmle 4, -3, and 7. In R, an integer is made explicit with L, for example: 10L.\ndate: a date, such as 2000-02-09, 2000-02-29, and 1912-06-23. Dates are stored behind the scene as an integer showing the distance from a set date. In R, this date is generally 1970-01-01, also known as the origin. Dates in R are generally written in the format yyyy-mm-dd.\nstring: a text, for example “hello”, “4”, or “==”. Strings are always enclosed with single or double quotation marks (’, “).\nlogical: a Boolean; TRUE or FALSE.\n\nTo check the type of a value, we can use class():\n\nclass(3)\n\n[1] \"numeric\"\n\nclass(3L)\n\n[1] \"integer\"\n\nclass(\"3\")\n\n[1] \"character\"\n\n\nAdditionally, we can transform values into different types, using certain functions:\n\nas.numeric(): transform value to numeric.\nas.integer(): transform value to integer.\nas.character(): transform value to string\nas.Date(): transform value to date. This function often needs an origin supplied. Note that Date is written with a capital D.\n\nHere are some examples:\n\nas.numeric(\"5\")\n\n[1] 5\n\nas.integer(3.9)\n\n[1] 3\n\nas.character(7)\n\n[1] \"7\"\n\nas.Date(\"1992-06-06\", origin = \"1970-01-01\")\n\n[1] \"1992-06-06\""
  },
  {
    "objectID": "accessing.html#accessing-the-data",
    "href": "accessing.html#accessing-the-data",
    "title": "Accessing and manipulating data",
    "section": "Accessing the data",
    "text": "Accessing the data\nBack to accessing the data! We now have a data frame with data inside, loaded in our environment. However, how can we actually access that data? For that, we can ‘subset’ the data. There is three ways we can do that:\n\nDollar operator: $\nThe dollar operator, $, allows you to quickly subset a column from the data. This is a good way to have a quick look in your data. For example, if we want to subset the column Sepal.Length, we can simply do the following:\n\niris$Sepal.Length\n\n  [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4 5.1\n [19] 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5 4.9 5.0\n [37] 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 5.3 5.0 7.0 6.4 6.9 5.5\n [55] 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8 6.2 5.6 5.9 6.1\n [73] 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0 5.4 6.0 6.7 6.3 5.6 5.5\n [91] 5.5 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7 6.3 5.8 7.1 6.3 6.5 7.6 4.9 7.3\n[109] 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7 6.0 6.9 5.6 7.7 6.3 6.7 7.2\n[127] 6.2 6.1 6.4 7.2 7.4 7.9 6.4 6.3 6.1 7.7 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8\n[145] 6.7 6.7 6.3 6.5 6.2 5.9\n\n\nAs you can see, this returns a vector with the values.\n\n\nSingle brackets: []\nImagine we want a specific row, a specific column, or even a specific cell from our data. In that case, $ is insufficient. Luckily, we can use single brackets: []. When using single brackets on a data frame, we can put two things in-between the brackets: the row-number we are interested in and the column we are interested in. These can be both index numbers and row/column names. If we want to select all rows or all columns, we can leave that argument empty. Let’s see some examples:\n\n# Select the value in the 14th row and 4th column\niris[14, 4]\n\n[1] 0.1\n\n# Select the second column by name with all rows\niris[, \"Sepal.Width\"]\n\n  [1] 3.5 3.0 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 3.7 3.4 3.0 3.0 4.0 4.4 3.9 3.5\n [19] 3.8 3.8 3.4 3.7 3.6 3.3 3.4 3.0 3.4 3.5 3.4 3.2 3.1 3.4 4.1 4.2 3.1 3.2\n [37] 3.5 3.6 3.0 3.4 3.5 2.3 3.2 3.5 3.8 3.0 3.8 3.2 3.7 3.3 3.2 3.2 3.1 2.3\n [55] 2.8 2.8 3.3 2.4 2.9 2.7 2.0 3.0 2.2 2.9 2.9 3.1 3.0 2.7 2.2 2.5 3.2 2.8\n [73] 2.5 2.8 2.9 3.0 2.8 3.0 2.9 2.6 2.4 2.4 2.7 2.7 3.0 3.4 3.1 2.3 3.0 2.5\n [91] 2.6 3.0 2.6 2.3 2.7 3.0 2.9 2.9 2.5 2.8 3.3 2.7 3.0 2.9 3.0 3.0 2.5 2.9\n[109] 2.5 3.6 3.2 2.7 3.0 2.5 2.8 3.2 3.0 3.8 2.6 2.2 3.2 2.8 2.8 2.7 3.3 3.2\n[127] 2.8 3.0 2.8 3.0 2.8 3.8 2.8 2.8 2.6 3.0 3.4 3.1 3.0 3.1 3.1 3.1 2.7 3.2\n[145] 3.3 3.0 2.5 3.0 3.4 3.0\n\n# Select the value in the 11th row and 4th column by index and name\niris[11, \"Petal.Width\"]\n\n[1] 0.2\n\n\n\n\n\n\n\n\nMeow?\n\n\n\n\n\nWhile writing this tutorial, my cat walked on my keyboard and decided she wanted to add the following:\nckxcccccccccccccccccccccccccccccccccccccc[[[[[[[[‘xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc.9¿’]]]]]]]]\n\n\n\nNow we can go even further with our brackets. When we subset our data frame once, we get a vector of values. Imagine we want to subset the 4th value of the column Sepal.Width, we can simply do:\n\niris[, \"Sepal.Width\"][4]\n\n[1] 3.1\n\n\nHowever, our fun doesn’t stop here! What if we didn’t want the 4th value, but all values larger than 3.0? Easy; let’s see how it works:\n\n# We can get a vector of the column Sepal.Width as we saw before\niris[, \"Sepal.Width\"]\n\n  [1] 3.5 3.0 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 3.7 3.4 3.0 3.0 4.0 4.4 3.9 3.5\n [19] 3.8 3.8 3.4 3.7 3.6 3.3 3.4 3.0 3.4 3.5 3.4 3.2 3.1 3.4 4.1 4.2 3.1 3.2\n [37] 3.5 3.6 3.0 3.4 3.5 2.3 3.2 3.5 3.8 3.0 3.8 3.2 3.7 3.3 3.2 3.2 3.1 2.3\n [55] 2.8 2.8 3.3 2.4 2.9 2.7 2.0 3.0 2.2 2.9 2.9 3.1 3.0 2.7 2.2 2.5 3.2 2.8\n [73] 2.5 2.8 2.9 3.0 2.8 3.0 2.9 2.6 2.4 2.4 2.7 2.7 3.0 3.4 3.1 2.3 3.0 2.5\n [91] 2.6 3.0 2.6 2.3 2.7 3.0 2.9 2.9 2.5 2.8 3.3 2.7 3.0 2.9 3.0 3.0 2.5 2.9\n[109] 2.5 3.6 3.2 2.7 3.0 2.5 2.8 3.2 3.0 3.8 2.6 2.2 3.2 2.8 2.8 2.7 3.3 3.2\n[127] 2.8 3.0 2.8 3.0 2.8 3.8 2.8 2.8 2.6 3.0 3.4 3.1 3.0 3.1 3.1 3.1 2.7 3.2\n[145] 3.3 3.0 2.5 3.0 3.4 3.0\n\n# From this vector, we can get per value a Boolean (TRUE or FALSE) whether it is &gt;3.0\niris[, \"Sepal.Width\"] &gt; 3\n\n  [1]  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE\n [13] FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n [25]  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n [37]  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE\n [49]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE\n [61] FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE\n [73] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [85] FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [97] FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[109] FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE\n[121]  TRUE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE\n[133] FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE FALSE  TRUE\n[145]  TRUE FALSE FALSE FALSE  TRUE FALSE\n\n# We can use these Booleans to subset the column to only keep values &gt;3.0\niris[, \"Sepal.Width\"][iris[\"Sepal.Width\"] &gt; 3]\n\n [1] 3.5 3.2 3.1 3.6 3.9 3.4 3.4 3.1 3.7 3.4 4.0 4.4 3.9 3.5 3.8 3.8 3.4 3.7 3.6\n[20] 3.3 3.4 3.4 3.5 3.4 3.2 3.1 3.4 4.1 4.2 3.1 3.2 3.5 3.6 3.4 3.5 3.2 3.5 3.8\n[39] 3.8 3.2 3.7 3.3 3.2 3.2 3.1 3.3 3.1 3.2 3.4 3.1 3.3 3.6 3.2 3.2 3.8 3.2 3.3\n[58] 3.2 3.8 3.4 3.1 3.1 3.1 3.1 3.2 3.3 3.4\n\n## To make it more readable, we could of course store the Booleans in their own vector which we use to subset\n# Create vector with Booleans\nlarger_than_3 &lt;- iris[, \"Sepal.Width\"] &gt; 3\n\n# Subset Sepal.Width\niris[, \"Sepal.Width\"][larger_than_3]\n\n [1] 3.5 3.2 3.1 3.6 3.9 3.4 3.4 3.1 3.7 3.4 4.0 4.4 3.9 3.5 3.8 3.8 3.4 3.7 3.6\n[20] 3.3 3.4 3.4 3.5 3.4 3.2 3.1 3.4 4.1 4.2 3.1 3.2 3.5 3.6 3.4 3.5 3.2 3.5 3.8\n[39] 3.8 3.2 3.7 3.3 3.2 3.2 3.1 3.3 3.1 3.2 3.4 3.1 3.3 3.6 3.2 3.2 3.8 3.2 3.3\n[58] 3.2 3.8 3.4 3.1 3.1 3.1 3.1 3.2 3.3 3.4\n\n\n\n\nDouble brackets: [[]]\nInstead of single brackets, we can also use double brackets. So what is the difference? First of all, we can supply only one argument to [[]]. In the case of a data frame, this means we cannot subset certain rows, but we can still subset columns. In a vector, we can use [[]] as seen before. So what is the difference between single brackets ([]) and double brackets ([[]])?\nIn vectors and matrices, using double brackets instead of single brackets will drop any attributes and names attached to the data (such as column labels). To subset on a list, double brackets can be used for single values/elements while single brackets return a list of the elements. You may notice that the difference is not big, but it is still good to have heard about it once. More can be found here.\n\n\n\n\n\n\nAlthough the $ operator is a quick way to access some data, it is recommended to not use it in the actual scripts you write. You can use $ to check out some data in the console or have quickly check something, but in your script you should use [] or [[]]. This allows you to easily transform code into your own functions (which we will see later). Additionally, dollar operators do not allow logicals, while brackets do."
  },
  {
    "objectID": "accessing.html#logicals",
    "href": "accessing.html#logicals",
    "title": "Accessing and manipulating data",
    "section": "Logicals",
    "text": "Logicals"
  },
  {
    "objectID": "accessing.html#which",
    "href": "accessing.html#which",
    "title": "Accessing and manipulating data",
    "section": "Which",
    "text": "Which\nWhat if we wanted to know not the exact values greater than 3, but the row numbers in the data set? In that case, we could use which():\n\nwhich(iris[, \"Sepal.Width\"] &gt; 3)\n\n [1]   1   3   4   5   6   7   8  10  11  12  15  16  17  18  19  20  21  22  23\n[20]  24  25  27  28  29  30  31  32  33  34  35  36  37  38  40  41  43  44  45\n[39]  47  48  49  50  51  52  53  57  66  71  86  87 101 110 111 116 118 121 125\n[58] 126 132 137 138 140 141 142 144 145 149\n\n\nWe now have the line numbers with which (pun intended) we can subset those values:\n\niris[which(iris[, \"Sepal.Width\"] &gt; 3), \"Sepal.Width\"]\n\n [1] 3.5 3.2 3.1 3.6 3.9 3.4 3.4 3.1 3.7 3.4 4.0 4.4 3.9 3.5 3.8 3.8 3.4 3.7 3.6\n[20] 3.3 3.4 3.4 3.5 3.4 3.2 3.1 3.4 4.1 4.2 3.1 3.2 3.5 3.6 3.4 3.5 3.2 3.5 3.8\n[39] 3.8 3.2 3.7 3.3 3.2 3.2 3.1 3.3 3.1 3.2 3.4 3.1 3.3 3.6 3.2 3.2 3.8 3.2 3.3\n[58] 3.2 3.8 3.4 3.1 3.1 3.1 3.1 3.2 3.3 3.4\n\n\nWe can even use our Boolean operators to show that using which() gives the same results as we saw before when not using which():\n\niris[which(iris[, \"Sepal.Width\"] &gt; 3), \"Sepal.Width\"] == iris[, \"Sepal.Width\"][iris[\"Sepal.Width\"] &gt; 3]\n\n [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[31] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[46] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[61] TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n\nThe main advantage of which() is that it might be more readable in your code."
  },
  {
    "objectID": "accessing.html#get-and-assign",
    "href": "accessing.html#get-and-assign",
    "title": "Accessing and manipulating data",
    "section": "Get and assign",
    "text": "Get and assign\nThe last important thing we should discuss about acessing the data are the functions get() and assign(). Although we can easily assign new data while writing our code (data &lt;- iris), at a certain point we might want to automate it (and later on we will see how to do that). In that case, the name of the data we want might vary. When a value might vary, such as a column, it is often possible to use strings, such as \"iris\". However, for assigning data, this does not work:\n\ndata &lt;- \"iris\"\ndata\n\n[1] \"iris\"\n\n\nWe just assigned the string \"iris\", instead of the data iris. In this case, assign() allows us to achieve our objective:\n\nassign(\"data\", iris)\nhead(data, n = 5)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n\n\nIn the same way, if we want to flexibly get data from the global environment, we can use get():\n\ndata &lt;- get(\"iris\")\nhead(data, n = 5)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa"
  },
  {
    "objectID": "accessing.html#comparing-values",
    "href": "accessing.html#comparing-values",
    "title": "Accessing and manipulating data",
    "section": "Comparing values",
    "text": "Comparing values\nBefore we see how to access the data, let’s take a sidestep to see how we can compare values in R. To compare values and get returned TRUE or FALSE (called Booleans) there are some important operators:\n\n&gt;: Greater than; is the value before the operator greater than the value after the operator.\n&lt;: Smaller than; is the value before the operator smaller than the value after the operator.\n&gt;=: Greater than or equal to; is the value before the operator greater than or equal to the value after the operator.\n&lt;=: Smaller than or equal to; is the value before the operator smaller than or equal to the value after the operator.\n==: Equal; is the value before the operator equal to the value after the operator.\n!=: Not equal; is the value before the operator not equal to the value after the operator.\n\nLet’s see some examples of using these operators:\n\n# Greater than\n5 &gt; 3\n\n[1] TRUE\n\n# Smaller than\n3 &lt; 5\n\n[1] TRUE\n\n# Greater than or equal to\n3 &gt;= 3\n\n[1] TRUE\n\n# Smaller than or equal to\n3 &lt;= 5\n\n[1] TRUE\n\n# Equal\n3 == 3\n\n[1] TRUE\n\n# Not equal\n3 != 3\n\n[1] FALSE"
  },
  {
    "objectID": "accessing.html#boolean-operators",
    "href": "accessing.html#boolean-operators",
    "title": "Accessing and manipulating data",
    "section": "Boolean operators",
    "text": "Boolean operators\nNow that we can compare values and get returned TRUE or FALSE, we can also make multiple comparisons using Boolean operators (also know as logical operators). If the conditions specified match, these will return TRUE, otherwise FALSE.\n\n|: OR; the value before or after the operator should be TRUE.\n&: AND; the values before and after the operator should be TRUE.\n!: NOT; the match should not be TRUE.\n\nUsing them works as follows:\n\n# OR\n3 == 3 | 3 != 3\n\n[1] TRUE\n\n# AND\n3 == 3 & 3 != 3\n\n[1] FALSE\n\n# NOT\n!(3 == 3)\n\n[1] FALSE"
  },
  {
    "objectID": "accessing.html#exercises",
    "href": "accessing.html#exercises",
    "title": "Accessing and manipulating data",
    "section": "Exercises",
    "text": "Exercises\n\n1. Store new data\nBesides the dataset iris, another available dataset in R is mtcars. Load this data into a new data frame called data using assign().\n\n\nAnswer\nassign(\"data\", mtcars)\n\n\n\n\n2. Subset column\nNow subset the column disp and store this in a variable called var.\n\n\nAnswer\n# Use dollar operator (generally unrecommended)\nvar &lt;- data$disp\n\n# Use single brackets\nvar &lt;- data[, \"disp\"]\n\n# Use double brackets\nvar &lt;- data[[\"disp\"]]\n\n\n\n\n3. Keep certain values\nFrom the variable var, keep only values greater than 110.5 and store this in a variable called var_new.\n\n\nAnswer\n# With which()\nvar_new &lt;- var[which(var &gt; 110.5)]\n\n# Without which()\nvar_new &lt;- var[var &gt; 110.5]\n\n\n\n\n4. Mutate variables\nNow divided all values in var_new by 10 and store this in a variable called var_div.\n\n\nAnswer\nvar_div &lt;- var_new / 10\n\n\n\n\n5. Change values to character\nNow change the values in the variable var_div to character values and store these in a variable called var_char.\n\n\nAnswer\nvar_char &lt;- as.character(var_new)\n\n\n\n\n6. Check character type\nMake sure the first value in the variable var_char is not of the type numeric (called \"numeric\").\n\n\nAnswer\nclass(var_char[1]) != \"numeric\"\n\n\n[1] TRUE"
  },
  {
    "objectID": "accessing.html#mutating-data",
    "href": "accessing.html#mutating-data",
    "title": "Accessing and manipulating data",
    "section": "Mutating data",
    "text": "Mutating data\nIt is great to be able to subset specific data from our data frames, but it is much more fun to do some statistics with it! A great thing about the subsetted columns of data is that you can easily perform calculations on them.\nFor example, to multiply all values in in the column Sepal.Width by 3, we can simply do:\n\niris[[\"Sepal.Width\"]] * 3\n\n  [1] 10.5  9.0  9.6  9.3 10.8 11.7 10.2 10.2  8.7  9.3 11.1 10.2  9.0  9.0 12.0\n [16] 13.2 11.7 10.5 11.4 11.4 10.2 11.1 10.8  9.9 10.2  9.0 10.2 10.5 10.2  9.6\n [31]  9.3 10.2 12.3 12.6  9.3  9.6 10.5 10.8  9.0 10.2 10.5  6.9  9.6 10.5 11.4\n [46]  9.0 11.4  9.6 11.1  9.9  9.6  9.6  9.3  6.9  8.4  8.4  9.9  7.2  8.7  8.1\n [61]  6.0  9.0  6.6  8.7  8.7  9.3  9.0  8.1  6.6  7.5  9.6  8.4  7.5  8.4  8.7\n [76]  9.0  8.4  9.0  8.7  7.8  7.2  7.2  8.1  8.1  9.0 10.2  9.3  6.9  9.0  7.5\n [91]  7.8  9.0  7.8  6.9  8.1  9.0  8.7  8.7  7.5  8.4  9.9  8.1  9.0  8.7  9.0\n[106]  9.0  7.5  8.7  7.5 10.8  9.6  8.1  9.0  7.5  8.4  9.6  9.0 11.4  7.8  6.6\n[121]  9.6  8.4  8.4  8.1  9.9  9.6  8.4  9.0  8.4  9.0  8.4 11.4  8.4  8.4  7.8\n[136]  9.0 10.2  9.3  9.0  9.3  9.3  9.3  8.1  9.6  9.9  9.0  7.5  9.0 10.2  9.0\n\n\nWe can also multiply all values by a value specific to them. For exapmle. to multiply Sepal.Width by Sepal.Length, we could run:\n\niris[[\"Sepal.Width\"]] * iris[[\"Sepal.Length\"]]\n\n  [1] 17.85 14.70 15.04 14.26 18.00 21.06 15.64 17.00 12.76 15.19 19.98 16.32\n [13] 14.40 12.90 23.20 25.08 21.06 17.85 21.66 19.38 18.36 18.87 16.56 16.83\n [25] 16.32 15.00 17.00 18.20 17.68 15.04 14.88 18.36 21.32 23.10 15.19 16.00\n [37] 19.25 17.64 13.20 17.34 17.50 10.35 14.08 17.50 19.38 14.40 19.38 14.72\n [49] 19.61 16.50 22.40 20.48 21.39 12.65 18.20 15.96 20.79 11.76 19.14 14.04\n [61] 10.00 17.70 13.20 17.69 16.24 20.77 16.80 15.66 13.64 14.00 18.88 17.08\n [73] 15.75 17.08 18.56 19.80 19.04 20.10 17.40 14.82 13.20 13.20 15.66 16.20\n [85] 16.20 20.40 20.77 14.49 16.80 13.75 14.30 18.30 15.08 11.50 15.12 17.10\n [97] 16.53 17.98 12.75 15.96 20.79 15.66 21.30 18.27 19.50 22.80 12.25 21.17\n[109] 16.75 25.92 20.80 17.28 20.40 14.25 16.24 20.48 19.50 29.26 20.02 13.20\n[121] 22.08 15.68 21.56 17.01 22.11 23.04 17.36 18.30 17.92 21.60 20.72 30.02\n[133] 17.92 17.64 15.86 23.10 21.42 19.84 18.00 21.39 20.77 21.39 15.66 21.76\n[145] 22.11 20.10 15.75 19.50 21.08 17.70\n\n\nIt is important to realize that if you are calculating with columns, each mutating value has to be of the same length as the column, or of length 1. If the mutating value is of the same length as the column (e.g., another column), each row in one column is mutated with the row in the other column. If the mutating value is of length 1 (e.g., the number 3), all rows in one column are mutated by the same value.\nYou can also perform functions on subsetted data:\n\nsummary(iris[[\"Sepal.Width\"]])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  2.000   2.800   3.000   3.057   3.300   4.400"
  },
  {
    "objectID": "accessing.html#next-topic",
    "href": "accessing.html#next-topic",
    "title": "Accessing and manipulating data",
    "section": "Next topic",
    "text": "Next topic\nWe now know how we can access our data and manipulate it. Next up, we will learn about packages, which allows us to do so much more with our data then we have seen until now.\nNext: Packages"
  }
]